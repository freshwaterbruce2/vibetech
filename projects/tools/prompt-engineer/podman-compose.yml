version: '3.8'

services:
  # Main application service
  prompt-engineer-api:
    build:
      context: .
      dockerfile: Containerfile
    ports:
      - "8000:8000"
      - "8501:8501"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=production
      - LOG_LEVEL=info
    volumes:
      # Mount project directories for analysis (adjust paths as needed)
      - type: bind
        source: /dev/projects
        target: /projects
        bind:
          propagation: shared
      # Persistent data storage
      - prompt-engineer-data:/app/data
      - prompt-engineer-cache:/app/cache
      - prompt-engineer-logs:/app/logs
    depends_on:
      - redis
    networks:
      - prompt-engineer-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Streamlit UI service (alternative deployment)
  prompt-engineer-ui:
    build:
      context: .
      dockerfile: Containerfile
    command: ["streamlit", "run", "streamlit_ui.py", "--server.port", "8501", "--server.address", "0.0.0.0"]
    ports:
      - "8501:8501"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=production
    volumes:
      - type: bind
        source: /dev/projects
        target: /projects
        bind:
          propagation: shared
      - prompt-engineer-data:/app/data
      - prompt-engineer-cache:/app/cache
    depends_on:
      - redis
    networks:
      - prompt-engineer-net
    restart: unless-stopped
    profiles:
      - ui-only

  # Redis cache service
  redis:
    image: docker.io/redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - prompt-engineer-net
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: docker.io/nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - prompt-engineer-api
      - prompt-engineer-ui
    networks:
      - prompt-engineer-net
    restart: unless-stopped
    profiles:
      - with-proxy

  # Prometheus monitoring (optional)
  prometheus:
    image: docker.io/prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - prompt-engineer-net
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana dashboard (optional)
  grafana:
    image: docker.io/grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - prompt-engineer-net
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  prompt-engineer-data:
    driver: local
  prompt-engineer-cache:
    driver: local  
  prompt-engineer-logs:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  prompt-engineer-net:
    driver: bridge
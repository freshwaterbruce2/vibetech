name: CI Pipeline (Optimized)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Cancel in-progress runs for the same workflow and branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Detect what changed to optimize pipeline
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      web: ${{ steps.filter.outputs.web }}
      crypto: ${{ steps.filter.outputs.crypto }}
      tools: ${{ steps.filter.outputs.tools }}
      any: ${{ steps.filter.outputs.changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check changed paths
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            web:
              - 'src/**'
              - 'public/**'
              - 'index.html'
              - 'package.json'
              - 'bun.lockb'
              - 'vite.config*.ts'
              - 'tsconfig.json'
              - 'vitest.config.ts'
              - 'playwright.config.ts'
              - 'eslint.config.js'
            crypto:
              - 'projects/crypto-enhanced/**'
            tools:
              - 'projects/tools/**'

  # Job 1: Lint and Type Check (only if web changed)
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.web == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Needed for nx affected

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: ${{ runner.os }}-nx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run ESLint (cached)
        run: bun run lint:all
        continue-on-error: true  # Allow warnings, but report them

      - name: Run TypeScript type checking (cached)
        run: bun run typecheck:all

  # Job 2: Unit Tests (only if web changed)
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.web == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: ${{ runner.os }}-nx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run unit tests (cached)
        run: bun run test:unit:all

      - name: Generate coverage report
        run: bun run test:unit:coverage
        continue-on-error: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Job 3: E2E Tests (Playwright) (only if web changed)
  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.web == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: ${{ runner.os }}-nx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Install Playwright browsers
        run: bunx playwright install --with-deps

      - name: Run Playwright tests (cached)
        run: bun run test:all
        continue-on-error: true

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # Job 4: Build (only if web changed)
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [changes, code-quality, unit-tests]
    if: needs.changes.outputs.web == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: ${{ runner.os }}-nx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build production bundle (cached)
        run: bun run build:production:all

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  # Job 5: Crypto Tests (only if crypto changed)
  crypto-tests:
    name: Crypto Trading Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.crypto == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'projects/crypto-enhanced/requirements.txt'

      - name: Install dependencies
        working-directory: projects/crypto-enhanced
        run: |
          python -m venv .venv
          .venv/bin/pip install -r requirements.txt

      - name: Run crypto tests
        working-directory: projects/crypto-enhanced
        run: .venv/bin/python run_tests.py

  # Job 6: Security Scan (always run, but cached)
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: .trivycache
          key: ${{ runner.os }}-trivy-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-trivy-

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          cache-dir: .trivycache

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Summary Job - All checks must pass
  all-checks:
    name: All CI Checks
    runs-on: ubuntu-latest
    needs: [changes, code-quality, unit-tests, e2e-tests, build, crypto-tests, security]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          echo "üîç Change Detection: ${{ needs.changes.result }}"
          echo "üìä Code Quality: ${{ needs.code-quality.result }}"
          echo "üß™ Unit Tests: ${{ needs.unit-tests.result }}"
          echo "üé≠ E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "üì¶ Build: ${{ needs.build.result }}"
          echo "üí∞ Crypto Tests: ${{ needs.crypto-tests.result }}"
          echo "üîí Security: ${{ needs.security.result }}"
          echo ""

          # Only fail if a job that ran actually failed (not skipped)
          if [ "${{ needs.code-quality.result }}" == "failure" ] || \
             [ "${{ needs.unit-tests.result }}" == "failure" ] || \
             [ "${{ needs.build.result }}" == "failure" ] || \
             [ "${{ needs.crypto-tests.result }}" == "failure" ] || \
             [ "${{ needs.security.result }}" == "failure" ]; then
            echo "‚ùå Required checks failed"
            exit 1
          fi

          echo "‚úÖ All checks passed (web: ${{ needs.changes.outputs.web }}, crypto: ${{ needs.changes.outputs.crypto }})"

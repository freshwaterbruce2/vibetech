name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:  # Manual trigger

# Prevent concurrent deployments
concurrency:
  group: production-deployment
  cancel-in-progress: false

jobs:
  # Run full CI pipeline first
  ci-checks:
    name: Run CI Pipeline
    uses: ./.github/workflows/ci.yml

  # Deploy to Netlify (or your chosen platform)
  deploy-netlify:
    name: Deploy to Netlify
    runs-on: ubuntu-latest
    needs: ci-checks
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.deploy-url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build production bundle
        run: bun run build:production
        env:
          NODE_ENV: production

      - name: Deploy to Netlify
        id: deploy
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: './dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions - ${{ github.event.head_commit.message }}"
          enable-pull-request-comment: true
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 10

      - name: Deployment summary
        run: |
          echo "### üöÄ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** ${{ steps.deploy.outputs.deploy-url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  # Optional: Deploy backend API
  deploy-backend:
    name: Deploy Backend API
    runs-on: ubuntu-latest
    needs: ci-checks
    if: github.ref == 'refs/heads/main'
    environment:
      name: production-api
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Deploy to Railway/Render/Fly.io
        run: |
          echo "Backend deployment placeholder"
          echo "Configure with your deployment platform:"
          echo "- Railway: railway up"
          echo "- Render: render deploy"
          echo "- Fly.io: flyctl deploy"
        # Add your actual deployment commands here

  # Create GitHub Release on version tags
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [deploy-netlify]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          echo "## Changes in this Release" > CHANGELOG.md
          git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"- %s (%h)" >> CHANGELOG.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-netlify]
    if: always()
    
    steps:
      - name: Deployment notification
        run: |
          if [ "${{ needs.deploy-netlify.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
            # Add Slack/Discord webhook notification here
          else
            echo "‚ùå Deployment failed!"
          fi

# Containerfile for Prompt Engineer Tool
# Multi-stage build for optimized container size

# Build stage
FROM python:3.11-slim as builder

# Set build arguments
ARG TARGETPLATFORM
ARG BUILDPLATFORM

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install Python dependencies
COPY requirements.txt requirements-async.txt ./
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir -r requirements-async.txt

# Production stage
FROM python:3.11-slim as production

# Set metadata labels
LABEL maintainer="Prompt Engineer Team"
LABEL version="1.0.0"
LABEL description="Intelligent project analysis and prompt engineering tool"

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser -d /app -s /sbin/nologin appuser

# Set working directory
WORKDIR /app

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy application code
COPY src/ src/
COPY streamlit_ui.py .
COPY scripts/ scripts/
COPY README.md .
COPY CLAUDE.md .

# Create necessary directories
RUN mkdir -p /app/data /app/cache /app/logs && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Set environment variables
ENV PYTHONPATH="/app:/app/src"
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Expose ports
EXPOSE 8501 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command (can be overridden)
CMD ["python", "-m", "uvicorn", "src.api.rest_api:app", "--host", "0.0.0.0", "--port", "8000"]

# Alternative commands available:
# Streamlit UI: streamlit run streamlit_ui.py --server.port 8501 --server.address 0.0.0.0
# Interactive CLI: python -m src.collectors.interactive_collector
# Direct analysis: python -c "from src.analyzers.project_intelligence import ProjectIntelligenceAnalyzer; analyzer = ProjectIntelligenceAnalyzer(); result = analyzer.analyze_project('/path/to/project'); print(result)"
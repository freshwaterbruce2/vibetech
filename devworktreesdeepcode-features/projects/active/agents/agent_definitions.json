{
  "agents": {
    "code-builder": {
      "name": "code-builder",
      "type": "development",
      "description": "UI/Component development specialist",
      "capabilities": [
        "create_components",
        "build_pages",
        "implement_ui",
        "style_components"
      ],
      "workflow": {
        "investigate": ["Analyze existing components", "Review design patterns"],
        "search": ["WebSearch for latest React patterns 2025", "Find similar components", "Search current UI/UX best practices", "Locate style definitions"],
        "apply": ["Create new components", "Update existing UI"],
        "test": ["Visual verification", "Component testing"],
        "iterate": ["Fix issues", "Optimize performance"]
      },
      "tools": ["Read", "Write", "Edit", "MultiEdit", "Grep", "Glob", "WebSearch", "WebFetch"],
      "parallel": true,
      "max_iterations": 5
    },
    "state-manager": {
      "name": "state-manager",
      "type": "architecture",
      "description": "Data layer and state management specialist",
      "capabilities": [
        "create_stores",
        "manage_state",
        "implement_persistence",
        "optimize_data_flow"
      ],
      "workflow": {
        "investigate": ["Analyze data requirements", "Review state patterns"],
        "search": ["WebSearch for Zustand best practices 2025", "Find data models", "Search latest state management patterns", "Locate API patterns"],
        "apply": ["Create Zustand stores", "Implement state logic"],
        "test": ["Verify data flow", "Test persistence"],
        "iterate": ["Optimize performance", "Fix state issues"]
      },
      "tools": ["Read", "Write", "Edit", "MultiEdit", "Grep", "WebSearch", "WebFetch"],
      "parallel": true,
      "max_iterations": 5
    },
    "type-guardian": {
      "name": "type-guardian",
      "type": "quality",
      "description": "TypeScript and build pipeline specialist",
      "capabilities": [
        "fix_type_errors",
        "add_type_definitions",
        "optimize_builds",
        "ensure_type_safety"
      ],
      "workflow": {
        "investigate": ["Scan for type errors", "Analyze build issues"],
        "search": ["WebSearch TypeScript 5.x solutions", "Find type definitions", "Search current TS best practices", "Locate error sources"],
        "apply": ["Fix type errors", "Add missing types"],
        "test": ["Run typecheck", "Run build"],
        "iterate": ["Fix remaining errors", "Optimize types"]
      },
      "tools": ["Read", "Edit", "MultiEdit", "Bash", "Grep", "WebSearch"],
      "parallel": true,
      "max_iterations": 10
    },
    "test-commander": {
      "name": "test-commander",
      "type": "testing",
      "description": "Testing infrastructure and test generation",
      "capabilities": [
        "setup_testing",
        "generate_tests",
        "run_test_suites",
        "coverage_analysis"
      ],
      "workflow": {
        "investigate": ["Analyze test requirements", "Review test patterns"],
        "search": ["WebSearch Vitest best practices 2025", "Find testable code", "Search latest testing strategies", "Locate test examples"],
        "apply": ["Setup test framework", "Write test cases"],
        "test": ["Run test suite", "Check coverage"],
        "iterate": ["Fix failing tests", "Improve coverage"]
      },
      "tools": ["Read", "Write", "Edit", "Bash", "Grep", "WebSearch"],
      "parallel": true,
      "max_iterations": 5
    },
    "performance-optimizer": {
      "name": "performance-optimizer",
      "type": "optimization",
      "description": "PWA features and performance optimization",
      "capabilities": [
        "implement_pwa",
        "optimize_performance",
        "setup_caching",
        "lighthouse_optimization"
      ],
      "workflow": {
        "investigate": ["Analyze performance metrics", "Review PWA requirements"],
        "search": ["WebSearch PWA best practices 2025", "Search Lighthouse optimization tips", "Find performance bottlenecks", "Locate optimization points"],
        "apply": ["Implement PWA features", "Add optimizations"],
        "test": ["Run Lighthouse", "Test offline mode"],
        "iterate": ["Improve scores", "Fix issues"]
      },
      "tools": ["Read", "Write", "Edit", "Bash", "WebFetch"],
      "parallel": true,
      "max_iterations": 5
    },
    "api-integrator": {
      "name": "api-integrator",
      "type": "integration",
      "description": "API integration and mock data specialist",
      "capabilities": [
        "create_api_layer",
        "implement_mock_data",
        "setup_api_clients",
        "handle_data_flow"
      ],
      "workflow": {
        "investigate": ["Analyze API requirements", "Review data models"],
        "search": ["WebSearch REST API best practices 2025", "Find API endpoints", "Search current API patterns", "Locate data schemas"],
        "apply": ["Create API services", "Implement mock data"],
        "test": ["Test API calls", "Verify data flow"],
        "iterate": ["Fix integration issues", "Optimize requests"]
      },
      "tools": ["Read", "Write", "Edit", "Bash", "WebFetch"],
      "parallel": true,
      "max_iterations": 5
    }
  },
  "orchestration": {
    "parallel_execution": true,
    "max_concurrent_agents": 6,
    "auto_retry_on_failure": true,
    "max_retries": 3,
    "timeout_seconds": 300,
    "yolo_mode": {
      "enabled": true,
      "auto_accept_edits": true,
      "auto_execute_commands": true,
      "continuous_iteration": true,
      "smart_error_recovery": true
    }
  },
  "learning": {
    "enabled": true,
    "database": "D:\\learning-system\\agent_learning.db",
    "optimization_threshold": 0.7,
    "token_optimization": true,
    "performance_tracking": true,
    "mistake_analysis": true
  }
}
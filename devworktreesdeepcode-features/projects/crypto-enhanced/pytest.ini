[pytest]
# pytest-asyncio configuration
asyncio_mode = auto

# Test discovery
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Output options
addopts =
    -v
    --tb=short
    --strict-markers
    --disable-warnings

# Test paths
testpaths = tests

# Markers
markers =
    asyncio: mark test as an asyncio test
    integration: mark test as integration test
    live: mark test as requiring live API connection

[coverage:run]
# Source code to measure
source = .
omit =
    tests/*
    test_*.py
    *_test.py
    .venv/*
    venv/*
    setup.py
    __pycache__/*
    *.pyc

[coverage:report]
# Reporting options
precision = 2
show_missing = true
skip_covered = false
sort = Cover

# Exclude from coverage report
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod
    @abc.abstractmethod
    pass

[coverage:html]
directory = coverage_html

[coverage:json]
output = coverage.json

[coverage:xml]
output = coverage.xml

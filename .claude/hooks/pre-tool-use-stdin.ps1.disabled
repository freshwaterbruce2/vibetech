#!/usr/bin/env powershell
# Pre-Tool-Use Hook - Learning System Integration (STDIN Version)
# Captures tool usage via STDIN JSON instead of parameters

# Configuration - UPDATED TO USE UNIFIED DATABASE
$LearningSystemPath = "D:\learning-system"
$LogPath = "$LearningSystemPath\logs"
$DatabasePath = "D:\databases\database.db"  # UNIFIED DATABASE

# Ensure log directory exists
if (-not (Test-Path "$LogPath")) {
    New-Item -ItemType Directory -Path "$LogPath" -Force | Out-Null
}

$LogFile = Join-Path "$LogPath" "tool-usage-$(Get-Date -Format 'yyyy-MM-dd').log"
$Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss.fff"

try {
    # Read JSON data from STDIN
    $StdinData = @()
    while ($null -ne ($line = [Console]::In.ReadLine())) {
        $StdinData += $line
    }

    $JsonInput = $StdinData -join "`n"

    # Parse JSON to get tool information
    $ToolData = $JsonInput | ConvertFrom-Json -ErrorAction SilentlyContinue

    # Extract tool name from JSON (try different possible field names)
    $ToolName = "Unknown"
    if ($ToolData.toolName) { $ToolName = $ToolData.toolName }
    elseif ($ToolData.tool_name) { $ToolName = $ToolData.tool_name }
    elseif ($ToolData.name) { $ToolName = $ToolData.name }
    elseif ($ToolData.tool) { $ToolName = $ToolData.tool }

    # Log tool usage with actual tool name
    $LogEntry = "[$Timestamp] [PRE-TOOL] Tool: $ToolName | JSON: $($JsonInput.Substring(0, [Math]::Min(100, $JsonInput.Length)))"
    Add-Content -Path "$LogFile" -Value "$LogEntry" -ErrorAction SilentlyContinue

    # Extract session context
    $SessionId = if ($ToolData.session_id) { $ToolData.session_id } else { [guid]::NewGuid().ToString() }
    $Cwd = if ($ToolData.cwd) { $ToolData.cwd } else { "" }
    $TaskType = "tool_execution"

    # Extract tool input for context
    $ToolInputJson = if ($ToolData.tool_input) {
        $ToolData.tool_input | ConvertTo-Json -Compress -Depth 3
    } else {
        "{}"
    }

    # Sanitize inputs to prevent SQL injection
    $SafeToolName = "$ToolName" -replace "'", "''"
    $SafeTimestamp = "$Timestamp" -replace "'", "''"
    $SafeToolInput = "$ToolInputJson" -replace "'", "''"
    $SafeCwd = "$Cwd" -replace "'", "''"

    # Insert into agent_executions with proper schema
    # agent_id=1 (general-purpose), status='pending' until completed
    $Query = @"
INSERT INTO agent_executions (
    agent_id, task_type, task_description, execution_context,
    tools_used, status, executed_at
) VALUES (
    1, 'tool_execution', '$SafeToolName',
    '$SafeCwd',
    '$SafeToolInput', 'pending', '$SafeTimestamp'
);
"@

    $ErrorLog = Join-Path "$LogPath" "hook-errors-$(Get-Date -Format 'yyyy-MM-dd').log"
    sqlite3 "$DatabasePath" "$Query" 2>> "$ErrorLog"

} catch {
    # Log error for debugging
    $ErrorMsg = "[$Timestamp] [PRE-TOOL] ERROR: $_"
    Add-Content -Path "$LogFile" -Value "$ErrorMsg" -ErrorAction SilentlyContinue
}

# Exit successfully
exit 0

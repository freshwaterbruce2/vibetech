{
  "permissions": {
    "allow": [
      "Bash(Select-Object Name)",
      "Bash(powershell.exe:*)",
      "Bash(python:*)",
      "Bash(sqlite3:*)",
      "WebSearch",
      "Bash(Select-Object -First 30)",
      "Bash(xargs -I {} sh -c 'echo \"\"\"\"{}:$(wc -c < \"\"\"\"{}\"\"\"\")\"\"\"\"')",
      "Bash(xargs:*)",
      "Bash(uniq:*)",
      "Bash(powershell:*)",
      "Bash(find:*)",
      "Bash(tasklist)",
      "Bash(findstr:*)",
      "Bash(dir:*)",
      "Bash(rm:*)",
      "Bash(npm run lint)",
      "Bash(npm run lint:*)",
      "Bash(npm run typecheck:*)",
      "Bash(npm run build:*)",
      "Bash(npm run quality:*)",
      "Bash(/dev/null)",
      "Bash(curl:*)",
      "Bash(npm run dev:*)",
      "Bash(for:*)",
      "Bash(do if [ -f \"$file\" ])",
      "Bash(then echo \"$file exists\")",
      "Bash(fi)",
      "Bash(done)",
      "WebFetch(domain:docs.kraken.com)",
      "Bash(npm run build:production:*)",
      "WebFetch(domain:github.com)",
      "Bash(timeout:*)",
      "Bash(bunx expo install:*)",
      "Bash(bun run start:*)",
      "Bash(bunx expo run:android:*)",
      "Bash(taskkill:*)",
      "WebFetch(domain:support.kraken.com)",
      "Bash(grep:*)",
      "Bash(bun run:*)",
      "Bash(cmd /c:*)",
      "Bash(git config:*)",
      "Bash(PORT=8083 bun run server.ts)",
      "Bash(npx expo:*)",
      "Bash(bun update:*)",
      "Bash(bun install:*)",
      "Bash(bun i:*)",
      "Bash(cat:*)",
      "Bash(adb:*)",
      "Read(//c/Users/fresh_zxae3v6/OneDrive/Pictures/Screenshots 1/**)",
      "Bash(bunx expo start:*)",
      "Bash(PORT=8084 bun run server.ts)",
      "Bash(tasklist:*)",
      "Bash(netstat:*)",
      "Bash(PORT=8087 bun run server.ts)",
      "Bash(/bashes)",
      "Bash(git add:*)",
      "WebFetch(domain:agents.md)",
      "Bash(git commit:*)",
      "Bash(npx eslint:*)",
      "Read(//c/c/dev/**)",
      "Bash(.scriptsagent.ps1 \"Create a comprehensive crypto trading dashboard component that displays real-time positions, P&L, and risk metrics with proper TypeScript types and responsive design\")",
      "Bash(git log:*)",
      "Bash(bun add:*)",
      "Bash(test:*)",
      "Bash(lsof:*)",
      "Bash(ss:*)",
      "Bash(git push:*)",
      "Bash(git reset:*)",
      "Bash(npm install:*)",
      "Bash(npm run turbo:typecheck:*)",
      "Bash(npx playwright test:*)",
      "Bash(npx tsc:*)",
      "Bash(npx update-browserslist-db:*)",
      "Bash(node:*)",
      "Bash(npm --version)",
      "Bash(npx cap sync:*)",
      "Bash(./gradlew:*)",
      "Bash(git init:*)",
      "Bash(git branch:*)",
      "Bash(git remote add:*)",
      "Bash(npm run test:*)",
      "Bash(npm run:*)",
      "Bash(.gradlew assembleDebug)",
      "Bash(gradlew.bat assembleDebug:*)",
      "Bash(./gradlew.bat:*)",
      "WebFetch(domain:capacitorjs.com)",
      "WebFetch(domain:v2.tauri.app)",
      "Bash(git tag:*)",
      "Bash(./nova-agent.exe --version)",
      "Bash(start src-tauri/target/release/nova-agent.exe)",
      "Read(//c/Users/**)",
      "Bash(cargo build:*)",
      "Bash(Select-Object -First 50)",
      "Bash(ls:*)",
      "Bash(Get-Content \"$env:APPDATA\\Claude\\logs\\mcp-server-desktop-commander.log\" -Tail 50 -ErrorAction SilentlyContinue)",
      "Bash(do if [ -f \"$dirpackage.json\" ])",
      "Bash(then echo \"$dir\")",
      "Bash(do echo \"=== $dir ===\")",
      "Bash([ -f \"$dir/vite.config.ts\" ])",
      "Bash(wc:*)",
      "Bash(do echo \"=== $project UI components ===\")",
      "Bash(git mv:*)",
      "Bash(git rm:*)",
      "Bash(npm cache clean:*)",
      "Bash(cargo check:*)",
      "Bash(bun pm ls:*)",
      "Bash(npx turbo run build:*)",
      "Bash(awk:*)",
      "Bash(npx turbo:*)",
      "Bash(where bash.exe)",
      "Bash(echo $CLAUDE_CODE_GIT_BASH_PATH)"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "C:\\dev\\projects\\active\\web-apps\\vibe-tech-lovable\\backend",
      "C:\\dev\\projects\\active\\web-apps",
      "D:\\"
    ]
  },
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "powershell -ExecutionPolicy Bypass -NoProfile -File C:\\dev\\.claude\\hooks\\pre-tool-use-stdin.ps1",
            "timeout": 5
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "powershell -ExecutionPolicy Bypass -NoProfile -File C:\\dev\\.claude\\hooks\\post-tool-use-stdin.ps1",
            "timeout": 5
          }
        ]
      }
    ]
  }
}
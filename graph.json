{
  "graph": {
    "nodes": {
      "business-booking-platform": {
        "name": "business-booking-platform",
        "type": "app",
        "data": {
          "root": "projects/active/web-apps/business-booking-platform",
          "name": "business-booking-platform",
          "projectType": "application",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "dev",
                "build",
                "preview",
                "lint",
                "lint:fix",
                "typecheck",
                "format",
                "test",
                "test:run",
                "test:ui",
                "test:coverage",
                "test:e2e",
                "test:e2e:headed",
                "test:e2e:debug",
                "test:visual",
                "test:visual:update",
                "analyze",
                "start:payment",
                "turbo:build",
                "turbo:test",
                "turbo:test:e2e",
                "turbo:lint",
                "turbo:typecheck",
                "turbo:quality"
              ]
            },
            "description": "Production-ready business hotel booking platform with AI-powered search and comprehensive features",
            "js": {
              "packageName": "business-booking-platform",
              "packageVersion": "2.0.0",
              "isInPackageManagerWorkspaces": true
            }
          },
          "targets": {
            "dev": {
              "executor": "nx:run-script",
              "options": {
                "script": "dev"
              },
              "metadata": {
                "scriptContent": "vite --port 3009",
                "runCommand": "pnpm run dev"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "build": {
              "executor": "nx:run-script",
              "options": {
                "script": "build"
              },
              "metadata": {
                "scriptContent": "tsc && vite build",
                "runCommand": "pnpm run build"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production",
                "{projectRoot}/src/**",
                "{projectRoot}/index.html",
                "{projectRoot}/vite.config.ts",
                "{projectRoot}/public/**"
              ],
              "outputs": [
                "{projectRoot}/dist/**",
                "{projectRoot}/build/**",
                "{projectRoot}/.next/**"
              ],
              "cache": true
            },
            "preview": {
              "executor": "nx:run-script",
              "options": {
                "script": "preview"
              },
              "metadata": {
                "scriptContent": "vite preview",
                "runCommand": "pnpm run preview"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": false
            },
            "lint": {
              "executor": "nx:run-script",
              "options": {
                "script": "lint"
              },
              "metadata": {
                "scriptContent": "eslint src --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
                "runCommand": "pnpm run lint"
              },
              "configurations": {},
              "parallelism": true,
              "inputs": [
                "default",
                "{workspaceRoot}/eslint.config.js",
                "{workspaceRoot}/.eslintrc.*"
              ],
              "outputs": [],
              "cache": true
            },
            "lint:fix": {
              "executor": "nx:run-script",
              "options": {
                "script": "lint:fix"
              },
              "metadata": {
                "scriptContent": "eslint src --ext ts,tsx --fix",
                "runCommand": "pnpm run lint:fix"
              },
              "configurations": {},
              "parallelism": true,
              "inputs": [
                "default",
                "{workspaceRoot}/eslint.config.js"
              ],
              "outputs": [],
              "cache": false
            },
            "typecheck": {
              "executor": "nx:run-script",
              "options": {
                "script": "typecheck"
              },
              "metadata": {
                "scriptContent": "tsc --noEmit",
                "runCommand": "pnpm run typecheck"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [],
              "inputs": [
                "default",
                "^default",
                "{projectRoot}/tsconfig.json"
              ],
              "outputs": [],
              "cache": true
            },
            "format": {
              "executor": "nx:run-script",
              "options": {
                "script": "format"
              },
              "metadata": {
                "scriptContent": "prettier --write src/**/*.{ts,tsx,css,md}",
                "runCommand": "pnpm run format"
              },
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "executor": "nx:run-script",
              "options": {
                "script": "test"
              },
              "metadata": {
                "scriptContent": "vitest",
                "runCommand": "pnpm run test"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "default",
                "^production"
              ],
              "outputs": [
                "{projectRoot}/playwright-report/**",
                "{projectRoot}/test-results/**",
                "{projectRoot}/coverage/**"
              ],
              "cache": true
            },
            "test:run": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:run"
              },
              "metadata": {
                "scriptContent": "vitest run",
                "runCommand": "pnpm run test:run"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:ui": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:ui"
              },
              "metadata": {
                "scriptContent": "vitest --ui",
                "runCommand": "pnpm run test:ui"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": false
            },
            "test:coverage": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:coverage"
              },
              "metadata": {
                "scriptContent": "vitest --coverage",
                "runCommand": "pnpm run test:coverage"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "default",
                "^production"
              ],
              "outputs": [
                "{projectRoot}/coverage/**",
                "{projectRoot}/coverage_html/**",
                "{projectRoot}/coverage.json",
                "{projectRoot}/coverage.xml"
              ],
              "cache": true
            },
            "test:e2e": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:e2e"
              },
              "metadata": {
                "scriptContent": "playwright test",
                "runCommand": "pnpm run test:e2e"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:e2e:headed": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:e2e:headed"
              },
              "metadata": {
                "scriptContent": "playwright test --headed",
                "runCommand": "pnpm run test:e2e:headed"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:e2e:debug": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:e2e:debug"
              },
              "metadata": {
                "scriptContent": "playwright test --debug",
                "runCommand": "pnpm run test:e2e:debug"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:visual": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:visual"
              },
              "metadata": {
                "scriptContent": "playwright test --config=playwright-visual.config.ts",
                "runCommand": "pnpm run test:visual"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:visual:update": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:visual:update"
              },
              "metadata": {
                "scriptContent": "playwright test --config=playwright-visual.config.ts --update-snapshots",
                "runCommand": "pnpm run test:visual:update"
              },
              "configurations": {},
              "parallelism": true
            },
            "analyze": {
              "executor": "nx:run-script",
              "options": {
                "script": "analyze"
              },
              "metadata": {
                "scriptContent": "npx vite-bundle-analyzer",
                "runCommand": "pnpm run analyze"
              },
              "configurations": {},
              "parallelism": true
            },
            "start:payment": {
              "executor": "nx:run-script",
              "options": {
                "script": "start:payment"
              },
              "metadata": {
                "scriptContent": "node simple-payment-server.cjs",
                "runCommand": "pnpm run start:payment"
              },
              "configurations": {},
              "parallelism": true
            },
            "turbo:build": {
              "executor": "nx:run-script",
              "options": {
                "script": "turbo:build"
              },
              "metadata": {
                "scriptContent": "turbo run build",
                "runCommand": "pnpm run turbo:build"
              },
              "configurations": {},
              "parallelism": true
            },
            "turbo:test": {
              "executor": "nx:run-script",
              "options": {
                "script": "turbo:test"
              },
              "metadata": {
                "scriptContent": "turbo run test:run",
                "runCommand": "pnpm run turbo:test"
              },
              "configurations": {},
              "parallelism": true
            },
            "turbo:test:e2e": {
              "executor": "nx:run-script",
              "options": {
                "script": "turbo:test:e2e"
              },
              "metadata": {
                "scriptContent": "turbo run test:e2e",
                "runCommand": "pnpm run turbo:test:e2e"
              },
              "configurations": {},
              "parallelism": true
            },
            "turbo:lint": {
              "executor": "nx:run-script",
              "options": {
                "script": "turbo:lint"
              },
              "metadata": {
                "scriptContent": "turbo run lint",
                "runCommand": "pnpm run turbo:lint"
              },
              "configurations": {},
              "parallelism": true
            },
            "turbo:typecheck": {
              "executor": "nx:run-script",
              "options": {
                "script": "turbo:typecheck"
              },
              "metadata": {
                "scriptContent": "turbo run typecheck",
                "runCommand": "pnpm run turbo:typecheck"
              },
              "configurations": {},
              "parallelism": true
            },
            "turbo:quality": {
              "executor": "nx:run-script",
              "options": {
                "script": "turbo:quality"
              },
              "metadata": {
                "scriptContent": "turbo run lint typecheck test:run build",
                "runCommand": "pnpm run turbo:quality"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            }
          },
          "implicitDependencies": []
        }
      },
      "digital-content-builder": {
        "name": "digital-content-builder",
        "type": "app",
        "data": {
          "root": "projects/active/web-apps/digital-content-builder",
          "name": "digital-content-builder",
          "projectType": "application",
          "tags": [
            "npm:public",
            "npm:ai",
            "npm:content-generation",
            "npm:deepseek",
            "npm:express",
            "npm:nodejs",
            "npm:api"
          ],
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "start",
                "dev",
                "build",
                "test",
                "test:unit",
                "test:visual",
                "test:visual:update",
                "test:visual:report",
                "test:puppeteer",
                "lint",
                "lint:fix",
                "typecheck",
                "quality",
                "security-check",
                "production-check",
                "clean",
                "clean-install"
              ]
            },
            "description": "Production-grade AI-powered content generation platform with DeepSeek integration",
            "js": {
              "packageName": "digital-content-builder",
              "packageVersion": "2.0.0",
              "packageMain": "server.js",
              "isInPackageManagerWorkspaces": true
            }
          },
          "targets": {
            "start": {
              "executor": "nx:run-script",
              "options": {
                "script": "start"
              },
              "metadata": {
                "scriptContent": "node server.js",
                "runCommand": "pnpm run start"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "dev": {
              "executor": "nx:run-script",
              "options": {
                "script": "dev"
              },
              "metadata": {
                "scriptContent": "nodemon server.js",
                "runCommand": "pnpm run dev"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "build": {
              "executor": "nx:run-script",
              "options": {
                "script": "build"
              },
              "metadata": {
                "scriptContent": "echo \"No build step required for Node.js project\"",
                "runCommand": "pnpm run build"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production",
                "{projectRoot}/src/**",
                "{projectRoot}/index.html",
                "{projectRoot}/vite.config.ts",
                "{projectRoot}/public/**"
              ],
              "outputs": [
                "{projectRoot}/dist/**",
                "{projectRoot}/build/**",
                "{projectRoot}/.next/**"
              ],
              "cache": true
            },
            "test": {
              "executor": "nx:run-script",
              "options": {
                "script": "test"
              },
              "metadata": {
                "scriptContent": "node --experimental-vm-modules node_modules/jest/bin/jest.js",
                "runCommand": "pnpm run test"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "default",
                "^production"
              ],
              "outputs": [
                "{projectRoot}/playwright-report/**",
                "{projectRoot}/test-results/**",
                "{projectRoot}/coverage/**"
              ],
              "cache": true
            },
            "test:unit": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:unit"
              },
              "metadata": {
                "scriptContent": "node --experimental-vm-modules node_modules/jest/bin/jest.js",
                "runCommand": "pnpm run test:unit"
              },
              "configurations": {},
              "parallelism": true,
              "inputs": [
                "default",
                "^production"
              ],
              "outputs": [
                "{projectRoot}/coverage/**"
              ],
              "cache": true
            },
            "test:visual": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:visual"
              },
              "metadata": {
                "scriptContent": "playwright test",
                "runCommand": "pnpm run test:visual"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:visual:update": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:visual:update"
              },
              "metadata": {
                "scriptContent": "playwright test --update-snapshots",
                "runCommand": "pnpm run test:visual:update"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:visual:report": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:visual:report"
              },
              "metadata": {
                "scriptContent": "playwright show-report tests/visual/reports",
                "runCommand": "pnpm run test:visual:report"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:puppeteer": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:puppeteer"
              },
              "metadata": {
                "scriptContent": "node tests/visual/puppeteer-automation.js",
                "runCommand": "pnpm run test:puppeteer"
              },
              "configurations": {},
              "parallelism": true
            },
            "lint": {
              "executor": "nx:run-script",
              "options": {
                "script": "lint"
              },
              "metadata": {
                "scriptContent": "eslint .",
                "runCommand": "pnpm run lint"
              },
              "configurations": {},
              "parallelism": true,
              "inputs": [
                "default",
                "{workspaceRoot}/eslint.config.js",
                "{workspaceRoot}/.eslintrc.*"
              ],
              "outputs": [],
              "cache": true
            },
            "lint:fix": {
              "executor": "nx:run-script",
              "options": {
                "script": "lint:fix"
              },
              "metadata": {
                "scriptContent": "eslint . --fix",
                "runCommand": "pnpm run lint:fix"
              },
              "configurations": {},
              "parallelism": true,
              "inputs": [
                "default",
                "{workspaceRoot}/eslint.config.js"
              ],
              "outputs": [],
              "cache": false
            },
            "typecheck": {
              "executor": "nx:run-script",
              "options": {
                "script": "typecheck"
              },
              "metadata": {
                "scriptContent": "echo \"No TypeScript in project\"",
                "runCommand": "pnpm run typecheck"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [],
              "inputs": [
                "default",
                "^default",
                "{projectRoot}/tsconfig.json"
              ],
              "outputs": [],
              "cache": true
            },
            "quality": {
              "executor": "nx:run-script",
              "options": {
                "script": "quality"
              },
              "metadata": {
                "scriptContent": "npm run lint",
                "runCommand": "pnpm run quality"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "lint",
                "typecheck",
                "build"
              ],
              "cache": true
            },
            "security-check": {
              "executor": "nx:run-script",
              "options": {
                "script": "security-check"
              },
              "metadata": {
                "scriptContent": "npm audit --audit-level=moderate",
                "runCommand": "pnpm run security-check"
              },
              "configurations": {},
              "parallelism": true
            },
            "production-check": {
              "executor": "nx:run-script",
              "options": {
                "script": "production-check"
              },
              "metadata": {
                "scriptContent": "NODE_ENV=production node server.js",
                "runCommand": "pnpm run production-check"
              },
              "configurations": {},
              "parallelism": true
            },
            "clean": {
              "executor": "nx:run-script",
              "options": {
                "script": "clean"
              },
              "metadata": {
                "scriptContent": "rm -rf node_modules package-lock.json",
                "runCommand": "pnpm run clean"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "clean-install": {
              "executor": "nx:run-script",
              "options": {
                "script": "clean-install"
              },
              "metadata": {
                "scriptContent": "rm -rf node_modules package-lock.json && npm install",
                "runCommand": "pnpm run clean-install"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            }
          },
          "implicitDependencies": []
        }
      },
      "nova-agent": {
        "name": "nova-agent",
        "type": "app",
        "data": {
          "root": "projects/active/desktop-apps/nova-agent-current",
          "name": "nova-agent",
          "projectType": "application",
          "tags": [
            "npm:public",
            "npm:ai",
            "npm:agent",
            "npm:assistant",
            "npm:deepseek",
            "npm:memory",
            "npm:rag"
          ],
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "dev",
                "dev:server",
                "dev:web",
                "build",
                "build:frontend",
                "build:web",
                "start",
                "cli",
                "tauri",
                "build:watch",
                "clean",
                "clean:all",
                "setup:cross-platform",
                "verify:cross-platform",
                "test",
                "test:web",
                "test:all",
                "test:coverage",
                "test:watch",
                "test:integration",
                "test:security",
                "test:performance",
                "test:db",
                "test:wsl",
                "test:wsl:watch",
                "test:wsl:coverage",
                "lint",
                "lint:fix",
                "typecheck",
                "format",
                "optimize-db",
                "prepare",
                "pre-commit",
                "setup",
                "monitor",
                "benchmark",
                "memory-check",
                "docs:generate",
                "deps:check",
                "deps:update",
                "release",
                "release:minor",
                "release:major",
                "complexity",
                "duplicates",
                "health-check",
                "setup:hooks",
                "automation:status",
                "quality:check",
                "quality:fix",
                "test:e2e",
                "test:e2e:ui",
                "test:e2e:headed",
                "test:e2e:debug",
                "test:e2e:report",
                "playwright:install",
                "playwright:install-deps",
                "icons:generate"
              ]
            },
            "description": "Neural Omnipresent Virtual Assistant - A personalized AI agent with memory and project management",
            "js": {
              "packageName": "nova-agent",
              "packageVersion": "1.1.0",
              "packageMain": "dist/index.js",
              "isInPackageManagerWorkspaces": true
            }
          },
          "targets": {
            "dev": {
              "executor": "nx:run-script",
              "options": {
                "script": "dev"
              },
              "metadata": {
                "scriptContent": "tauri dev",
                "runCommand": "pnpm run dev"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "dev:server": {
              "executor": "nx:run-script",
              "options": {
                "script": "dev:server"
              },
              "metadata": {
                "scriptContent": "tsx watch src/index.ts",
                "runCommand": "pnpm run dev:server"
              },
              "configurations": {},
              "parallelism": true
            },
            "dev:web": {
              "executor": "nx:run-script",
              "options": {
                "script": "dev:web"
              },
              "metadata": {
                "scriptContent": "vite",
                "runCommand": "pnpm run dev:web"
              },
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-script",
              "options": {
                "script": "build"
              },
              "metadata": {
                "scriptContent": "tauri build",
                "runCommand": "pnpm run build"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production",
                "{projectRoot}/src/**",
                "{projectRoot}/index.html",
                "{projectRoot}/vite.config.ts",
                "{projectRoot}/public/**"
              ],
              "outputs": [
                "{projectRoot}/dist/**",
                "{projectRoot}/build/**",
                "{projectRoot}/.next/**"
              ],
              "cache": true
            },
            "build:frontend": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:frontend"
              },
              "metadata": {
                "scriptContent": "vite build",
                "runCommand": "pnpm run build:frontend"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:web": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:web"
              },
              "metadata": {
                "scriptContent": "cd nova-web && npm run build",
                "runCommand": "pnpm run build:web"
              },
              "configurations": {},
              "parallelism": true
            },
            "start": {
              "executor": "nx:run-script",
              "options": {
                "script": "start"
              },
              "metadata": {
                "scriptContent": "tauri dev",
                "runCommand": "pnpm run start"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "cli": {
              "executor": "nx:run-script",
              "options": {
                "script": "cli"
              },
              "metadata": {
                "scriptContent": "node dist/cli.js",
                "runCommand": "pnpm run cli"
              },
              "configurations": {},
              "parallelism": true
            },
            "tauri": {
              "executor": "nx:run-script",
              "options": {
                "script": "tauri"
              },
              "metadata": {
                "scriptContent": "tauri",
                "runCommand": "pnpm run tauri"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:watch": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:watch"
              },
              "metadata": {
                "scriptContent": "tsc -w",
                "runCommand": "pnpm run build:watch"
              },
              "configurations": {},
              "parallelism": true
            },
            "clean": {
              "executor": "nx:run-script",
              "options": {
                "script": "clean"
              },
              "metadata": {
                "scriptContent": "rimraf dist node_modules/.cache .nyc_output coverage",
                "runCommand": "pnpm run clean"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "clean:all": {
              "executor": "nx:run-script",
              "options": {
                "script": "clean:all"
              },
              "metadata": {
                "scriptContent": "npm run clean && rimraf node_modules",
                "runCommand": "pnpm run clean:all"
              },
              "configurations": {},
              "parallelism": true
            },
            "setup:cross-platform": {
              "executor": "nx:run-script",
              "options": {
                "script": "setup:cross-platform"
              },
              "metadata": {
                "scriptContent": "npm install && npm run build",
                "runCommand": "pnpm run setup:cross-platform"
              },
              "configurations": {},
              "parallelism": true
            },
            "verify:cross-platform": {
              "executor": "nx:run-script",
              "options": {
                "script": "verify:cross-platform"
              },
              "metadata": {
                "scriptContent": "node verify-cross-platform.js",
                "runCommand": "pnpm run verify:cross-platform"
              },
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "executor": "nx:run-script",
              "options": {
                "script": "test"
              },
              "metadata": {
                "scriptContent": "vitest",
                "runCommand": "pnpm run test"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "default",
                "^production"
              ],
              "outputs": [
                "{projectRoot}/playwright-report/**",
                "{projectRoot}/test-results/**",
                "{projectRoot}/coverage/**"
              ],
              "cache": true
            },
            "test:web": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:web"
              },
              "metadata": {
                "scriptContent": "vitest --config vitest.web.config.ts",
                "runCommand": "pnpm run test:web"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:all": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:all"
              },
              "metadata": {
                "scriptContent": "npm run test && npm run test:web",
                "runCommand": "pnpm run test:all"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:coverage": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:coverage"
              },
              "metadata": {
                "scriptContent": "vitest run --coverage",
                "runCommand": "pnpm run test:coverage"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "default",
                "^production"
              ],
              "outputs": [
                "{projectRoot}/coverage/**",
                "{projectRoot}/coverage_html/**",
                "{projectRoot}/coverage.json",
                "{projectRoot}/coverage.xml"
              ],
              "cache": true
            },
            "test:watch": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:watch"
              },
              "metadata": {
                "scriptContent": "vitest watch",
                "runCommand": "pnpm run test:watch"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:integration": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:integration"
              },
              "metadata": {
                "scriptContent": "vitest run src/__tests__/integration",
                "runCommand": "pnpm run test:integration"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:security": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:security"
              },
              "metadata": {
                "scriptContent": "vitest run src/__tests__/security",
                "runCommand": "pnpm run test:security"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:performance": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:performance"
              },
              "metadata": {
                "scriptContent": "vitest run --reporter=json --outputFile=performance-results.json",
                "runCommand": "pnpm run test:performance"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:db": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:db"
              },
              "metadata": {
                "scriptContent": "vitest run src/tests/database-performance.test.ts",
                "runCommand": "pnpm run test:db"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:wsl": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:wsl"
              },
              "metadata": {
                "scriptContent": "vitest --pool=forks --poolOptions.forks.singleFork=true",
                "runCommand": "pnpm run test:wsl"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:wsl:watch": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:wsl:watch"
              },
              "metadata": {
                "scriptContent": "vitest watch --pool=forks --poolOptions.forks.singleFork=true",
                "runCommand": "pnpm run test:wsl:watch"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:wsl:coverage": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:wsl:coverage"
              },
              "metadata": {
                "scriptContent": "vitest run --coverage --pool=forks --poolOptions.forks.singleFork=true",
                "runCommand": "pnpm run test:wsl:coverage"
              },
              "configurations": {},
              "parallelism": true
            },
            "lint": {
              "executor": "nx:run-script",
              "options": {
                "script": "lint"
              },
              "metadata": {
                "scriptContent": "eslint src --ext .ts,.tsx --max-warnings 0",
                "runCommand": "pnpm run lint"
              },
              "configurations": {},
              "parallelism": true,
              "inputs": [
                "default",
                "{workspaceRoot}/eslint.config.js",
                "{workspaceRoot}/.eslintrc.*"
              ],
              "outputs": [],
              "cache": true
            },
            "lint:fix": {
              "executor": "nx:run-script",
              "options": {
                "script": "lint:fix"
              },
              "metadata": {
                "scriptContent": "eslint src --ext .ts,.tsx --fix",
                "runCommand": "pnpm run lint:fix"
              },
              "configurations": {},
              "parallelism": true,
              "inputs": [
                "default",
                "{workspaceRoot}/eslint.config.js"
              ],
              "outputs": [],
              "cache": false
            },
            "typecheck": {
              "executor": "nx:run-script",
              "options": {
                "script": "typecheck"
              },
              "metadata": {
                "scriptContent": "tsc --noEmit --project tsconfig.frontend.json",
                "runCommand": "pnpm run typecheck"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [],
              "inputs": [
                "default",
                "^default",
                "{projectRoot}/tsconfig.json"
              ],
              "outputs": [],
              "cache": true
            },
            "format": {
              "executor": "nx:run-script",
              "options": {
                "script": "format"
              },
              "metadata": {
                "scriptContent": "prettier --write \"src/**/*.ts\"",
                "runCommand": "pnpm run format"
              },
              "configurations": {},
              "parallelism": true
            },
            "optimize-db": {
              "executor": "nx:run-script",
              "options": {
                "script": "optimize-db"
              },
              "metadata": {
                "scriptContent": "tsx src/scripts/optimize-database.ts",
                "runCommand": "pnpm run optimize-db"
              },
              "configurations": {},
              "parallelism": true
            },
            "prepare": {
              "executor": "nx:run-script",
              "options": {
                "script": "prepare"
              },
              "metadata": {
                "scriptContent": "husky",
                "runCommand": "pnpm run prepare"
              },
              "configurations": {},
              "parallelism": true
            },
            "pre-commit": {
              "executor": "nx:run-script",
              "options": {
                "script": "pre-commit"
              },
              "metadata": {
                "scriptContent": "lint-staged",
                "runCommand": "pnpm run pre-commit"
              },
              "configurations": {},
              "parallelism": true
            },
            "setup": {
              "executor": "nx:run-script",
              "options": {
                "script": "setup"
              },
              "metadata": {
                "scriptContent": "bash scripts/dev-setup.sh",
                "runCommand": "pnpm run setup"
              },
              "configurations": {},
              "parallelism": true
            },
            "monitor": {
              "executor": "nx:run-script",
              "options": {
                "script": "monitor"
              },
              "metadata": {
                "scriptContent": "node scripts/project-monitor.js",
                "runCommand": "pnpm run monitor"
              },
              "configurations": {},
              "parallelism": true
            },
            "benchmark": {
              "executor": "nx:run-script",
              "options": {
                "script": "benchmark"
              },
              "metadata": {
                "scriptContent": "node scripts/performance-benchmark.js",
                "runCommand": "pnpm run benchmark"
              },
              "configurations": {},
              "parallelism": true
            },
            "memory-check": {
              "executor": "nx:run-script",
              "options": {
                "script": "memory-check"
              },
              "metadata": {
                "scriptContent": "node --expose-gc scripts/memory-leak-detector.js",
                "runCommand": "pnpm run memory-check"
              },
              "configurations": {},
              "parallelism": true
            },
            "docs:generate": {
              "executor": "nx:run-script",
              "options": {
                "script": "docs:generate"
              },
              "metadata": {
                "scriptContent": "typedoc --out docs/api src && node scripts/generate-docs-index.js",
                "runCommand": "pnpm run docs:generate"
              },
              "configurations": {},
              "parallelism": true
            },
            "deps:check": {
              "executor": "nx:run-script",
              "options": {
                "script": "deps:check"
              },
              "metadata": {
                "scriptContent": "npm outdated && npm audit",
                "runCommand": "pnpm run deps:check"
              },
              "configurations": {},
              "parallelism": true
            },
            "deps:update": {
              "executor": "nx:run-script",
              "options": {
                "script": "deps:update"
              },
              "metadata": {
                "scriptContent": "npx npm-check-updates -u --target minor && npm install",
                "runCommand": "pnpm run deps:update"
              },
              "configurations": {},
              "parallelism": true
            },
            "release": {
              "executor": "nx:run-script",
              "options": {
                "script": "release"
              },
              "metadata": {
                "scriptContent": "standard-version",
                "runCommand": "pnpm run release"
              },
              "configurations": {},
              "parallelism": true
            },
            "release:minor": {
              "executor": "nx:run-script",
              "options": {
                "script": "release:minor"
              },
              "metadata": {
                "scriptContent": "standard-version --release-as minor",
                "runCommand": "pnpm run release:minor"
              },
              "configurations": {},
              "parallelism": true
            },
            "release:major": {
              "executor": "nx:run-script",
              "options": {
                "script": "release:major"
              },
              "metadata": {
                "scriptContent": "standard-version --release-as major",
                "runCommand": "pnpm run release:major"
              },
              "configurations": {},
              "parallelism": true
            },
            "complexity": {
              "executor": "nx:run-script",
              "options": {
                "script": "complexity"
              },
              "metadata": {
                "scriptContent": "npx code-complexity src --format json",
                "runCommand": "pnpm run complexity"
              },
              "configurations": {},
              "parallelism": true
            },
            "duplicates": {
              "executor": "nx:run-script",
              "options": {
                "script": "duplicates"
              },
              "metadata": {
                "scriptContent": "npx jscpd src --reporters json",
                "runCommand": "pnpm run duplicates"
              },
              "configurations": {},
              "parallelism": true
            },
            "health-check": {
              "executor": "nx:run-script",
              "options": {
                "script": "health-check"
              },
              "metadata": {
                "scriptContent": "node scripts/automation/health-monitor.cjs",
                "runCommand": "pnpm run health-check"
              },
              "configurations": {},
              "parallelism": true
            },
            "setup:hooks": {
              "executor": "nx:run-script",
              "options": {
                "script": "setup:hooks"
              },
              "metadata": {
                "scriptContent": "chmod +x .husky/pre-commit",
                "runCommand": "pnpm run setup:hooks"
              },
              "configurations": {},
              "parallelism": true
            },
            "automation:status": {
              "executor": "nx:run-script",
              "options": {
                "script": "automation:status"
              },
              "metadata": {
                "scriptContent": "echo '🤖 Nova Agent Automation System v1.0.0 - Ready!'",
                "runCommand": "pnpm run automation:status"
              },
              "configurations": {},
              "parallelism": true
            },
            "quality:check": {
              "executor": "nx:run-script",
              "options": {
                "script": "quality:check"
              },
              "metadata": {
                "scriptContent": "npm run build && npm run test:wsl -- --run",
                "runCommand": "pnpm run quality:check"
              },
              "configurations": {},
              "parallelism": true
            },
            "quality:fix": {
              "executor": "nx:run-script",
              "options": {
                "script": "quality:fix"
              },
              "metadata": {
                "scriptContent": "npm run lint:fix || true",
                "runCommand": "pnpm run quality:fix"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "lint:fix",
                "typecheck"
              ],
              "cache": false
            },
            "test:e2e": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:e2e"
              },
              "metadata": {
                "scriptContent": "playwright test",
                "runCommand": "pnpm run test:e2e"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:e2e:ui": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:e2e:ui"
              },
              "metadata": {
                "scriptContent": "playwright test --ui",
                "runCommand": "pnpm run test:e2e:ui"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:e2e:headed": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:e2e:headed"
              },
              "metadata": {
                "scriptContent": "playwright test --headed",
                "runCommand": "pnpm run test:e2e:headed"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:e2e:debug": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:e2e:debug"
              },
              "metadata": {
                "scriptContent": "playwright test --debug",
                "runCommand": "pnpm run test:e2e:debug"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:e2e:report": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:e2e:report"
              },
              "metadata": {
                "scriptContent": "playwright show-report",
                "runCommand": "pnpm run test:e2e:report"
              },
              "configurations": {},
              "parallelism": true
            },
            "playwright:install": {
              "executor": "nx:run-script",
              "options": {
                "script": "playwright:install"
              },
              "metadata": {
                "scriptContent": "playwright install",
                "runCommand": "pnpm run playwright:install"
              },
              "configurations": {},
              "parallelism": true
            },
            "playwright:install-deps": {
              "executor": "nx:run-script",
              "options": {
                "script": "playwright:install-deps"
              },
              "metadata": {
                "scriptContent": "playwright install-deps",
                "runCommand": "pnpm run playwright:install-deps"
              },
              "configurations": {},
              "parallelism": true
            },
            "icons:generate": {
              "executor": "nx:run-script",
              "options": {
                "script": "icons:generate"
              },
              "metadata": {
                "scriptContent": "node scripts/generate-icons.js",
                "runCommand": "pnpm run icons:generate"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            }
          },
          "implicitDependencies": []
        }
      },
      "deepcode-editor": {
        "name": "deepcode-editor",
        "type": "app",
        "data": {
          "root": "projects/active/desktop-apps/deepcode-editor",
          "name": "deepcode-editor",
          "projectType": "application",
          "tags": [
            "npm:public",
            "npm:code editor",
            "npm:AI assistant",
            "npm:DeepSeek",
            "npm:programming",
            "npm:IDE",
            "npm:cursor alternative",
            "npm:monaco editor"
          ],
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "build",
                "build:prod",
                "build:analyze",
                "build:production",
                "build:production:electron",
                "build:fast",
                "build:verbose",
                "build:strict",
                "build:electron",
                "build:electron:publish",
                "build:electron:draft",
                "build:types",
                "clean",
                "dev",
                "dev:electron",
                "dev:web",
                "dist",
                "dist:all",
                "dist:mac",
                "dist:win",
                "dist:linux",
                "electron:dist",
                "electron:pack",
                "format",
                "format:check",
                "hook",
                "hook:docs",
                "hook:format-watch",
                "hook:memory",
                "hook:memory-watch",
                "hook:performance",
                "hook:pre-commit",
                "hook:screenshot",
                "hook:test-watch",
                "hook:validate-patterns",
                "hook:validate-tech",
                "system:init",
                "system:status",
                "system:workflow",
                "system:optimize",
                "system:dashboard",
                "system:report",
                "agent:feature",
                "agent:bug",
                "agent:security",
                "mcp:status",
                "mcp:workflow",
                "multiagent:status",
                "multiagent:workflow",
                "dev:advanced",
                "lint",
                "lint:fix",
                "package",
                "prepare",
                "preview",
                "puppeteer:demo",
                "puppeteer:design",
                "puppeteer:performance",
                "puppeteer:screenshot",
                "puppeteer:test",
                "setup:hooks",
                "start",
                "test",
                "typecheck",
                "typecheck:all",
                "typecheck:build",
                "typecheck:test",
                "typecheck:watch"
              ]
            },
            "description": "AI-powered code editor with DeepSeek integration - A modern alternative to Cursor",
            "js": {
              "packageName": "deepcode-editor",
              "packageVersion": "1.0.0",
              "packageMain": "electron/main.js",
              "isInPackageManagerWorkspaces": true
            }
          },
          "targets": {
            "build": {
              "executor": "nx:run-script",
              "options": {
                "script": "build"
              },
              "metadata": {
                "scriptContent": "tsc --project tsconfig.build.relaxed.json && vite build",
                "runCommand": "pnpm run build"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production",
                "{projectRoot}/src/**",
                "{projectRoot}/index.html",
                "{projectRoot}/vite.config.ts",
                "{projectRoot}/public/**"
              ],
              "outputs": [
                "{projectRoot}/dist/**",
                "{projectRoot}/build/**",
                "{projectRoot}/.next/**"
              ],
              "cache": true
            },
            "build:prod": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:prod"
              },
              "metadata": {
                "scriptContent": "NODE_ENV=production tsc --project tsconfig.build.json && vite build --mode production",
                "runCommand": "pnpm run build:prod"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:analyze": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:analyze"
              },
              "metadata": {
                "scriptContent": "ANALYZE=true npm run build:prod",
                "runCommand": "pnpm run build:analyze"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:production": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:production"
              },
              "metadata": {
                "scriptContent": "node scripts/build-production.js",
                "runCommand": "pnpm run build:production"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production"
              ],
              "outputs": [
                "{projectRoot}/dist/**",
                "{projectRoot}/build/**"
              ],
              "cache": true
            },
            "build:production:electron": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:production:electron"
              },
              "metadata": {
                "scriptContent": "node scripts/build-production.js --electron",
                "runCommand": "pnpm run build:production:electron"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:fast": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:fast"
              },
              "metadata": {
                "scriptContent": "SKIP_TESTS=true SKIP_LINTING=true node scripts/build-production.js",
                "runCommand": "pnpm run build:fast"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:verbose": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:verbose"
              },
              "metadata": {
                "scriptContent": "VERBOSE=true node scripts/build-production.js",
                "runCommand": "pnpm run build:verbose"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:strict": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:strict"
              },
              "metadata": {
                "scriptContent": "tsc && vite build",
                "runCommand": "pnpm run build:strict"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:electron": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:electron"
              },
              "metadata": {
                "scriptContent": "npm run build && electron-builder --publish=never",
                "runCommand": "pnpm run build:electron"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:electron:publish": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:electron:publish"
              },
              "metadata": {
                "scriptContent": "npm run build && electron-builder --publish=always",
                "runCommand": "pnpm run build:electron:publish"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:electron:draft": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:electron:draft"
              },
              "metadata": {
                "scriptContent": "npm run build && electron-builder --publish=onTagOrDraft",
                "runCommand": "pnpm run build:electron:draft"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:types": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:types"
              },
              "metadata": {
                "scriptContent": "tsc --emitDeclarationOnly -p tsconfig.build.json",
                "runCommand": "pnpm run build:types"
              },
              "configurations": {},
              "parallelism": true
            },
            "clean": {
              "executor": "nx:run-script",
              "options": {
                "script": "clean"
              },
              "metadata": {
                "scriptContent": "rm -rf dist build .tsbuildinfo .tsbuildinfo.node dist/.tsbuildinfo",
                "runCommand": "pnpm run clean"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "dev": {
              "executor": "nx:run-script",
              "options": {
                "script": "dev"
              },
              "metadata": {
                "scriptContent": "concurrently \"npm run dev:web\" \"wait-on http://localhost:3001 && npm run dev:electron\"",
                "runCommand": "pnpm run dev"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "dev:electron": {
              "executor": "nx:run-script",
              "options": {
                "script": "dev:electron"
              },
              "metadata": {
                "scriptContent": "electron electron/main.js",
                "runCommand": "pnpm run dev:electron"
              },
              "configurations": {},
              "parallelism": true
            },
            "dev:web": {
              "executor": "nx:run-script",
              "options": {
                "script": "dev:web"
              },
              "metadata": {
                "scriptContent": "vite",
                "runCommand": "pnpm run dev:web"
              },
              "configurations": {},
              "parallelism": true
            },
            "dist": {
              "executor": "nx:run-script",
              "options": {
                "script": "dist"
              },
              "metadata": {
                "scriptContent": "npm run build:prod && electron-builder --publish=never",
                "runCommand": "pnpm run dist"
              },
              "configurations": {},
              "parallelism": true
            },
            "dist:all": {
              "executor": "nx:run-script",
              "options": {
                "script": "dist:all"
              },
              "metadata": {
                "scriptContent": "npm run build:prod && electron-builder --mac --win --linux --publish=never",
                "runCommand": "pnpm run dist:all"
              },
              "configurations": {},
              "parallelism": true
            },
            "dist:mac": {
              "executor": "nx:run-script",
              "options": {
                "script": "dist:mac"
              },
              "metadata": {
                "scriptContent": "npm run build:prod && electron-builder --mac --publish=never",
                "runCommand": "pnpm run dist:mac"
              },
              "configurations": {},
              "parallelism": true
            },
            "dist:win": {
              "executor": "nx:run-script",
              "options": {
                "script": "dist:win"
              },
              "metadata": {
                "scriptContent": "npm run build:prod && electron-builder --win --publish=never",
                "runCommand": "pnpm run dist:win"
              },
              "configurations": {},
              "parallelism": true
            },
            "dist:linux": {
              "executor": "nx:run-script",
              "options": {
                "script": "dist:linux"
              },
              "metadata": {
                "scriptContent": "npm run build:prod && electron-builder --linux --publish=never",
                "runCommand": "pnpm run dist:linux"
              },
              "configurations": {},
              "parallelism": true
            },
            "electron:dist": {
              "executor": "nx:run-script",
              "options": {
                "script": "electron:dist"
              },
              "metadata": {
                "scriptContent": "electron-builder",
                "runCommand": "pnpm run electron:dist"
              },
              "configurations": {},
              "parallelism": true
            },
            "electron:pack": {
              "executor": "nx:run-script",
              "options": {
                "script": "electron:pack"
              },
              "metadata": {
                "scriptContent": "electron-builder --dir",
                "runCommand": "pnpm run electron:pack"
              },
              "configurations": {},
              "parallelism": true
            },
            "format": {
              "executor": "nx:run-script",
              "options": {
                "script": "format"
              },
              "metadata": {
                "scriptContent": "prettier --write \"src/**/*.{ts,tsx,js,jsx}\"",
                "runCommand": "pnpm run format"
              },
              "configurations": {},
              "parallelism": true
            },
            "format:check": {
              "executor": "nx:run-script",
              "options": {
                "script": "format:check"
              },
              "metadata": {
                "scriptContent": "prettier --check \"src/**/*.{ts,tsx,js,jsx}\"",
                "runCommand": "pnpm run format:check"
              },
              "configurations": {},
              "parallelism": true
            },
            "hook": {
              "executor": "nx:run-script",
              "options": {
                "script": "hook"
              },
              "metadata": {
                "scriptContent": "node hooks/index.js",
                "runCommand": "pnpm run hook"
              },
              "configurations": {},
              "parallelism": true
            },
            "hook:docs": {
              "executor": "nx:run-script",
              "options": {
                "script": "hook:docs"
              },
              "metadata": {
                "scriptContent": "node hooks/generate-docs.js",
                "runCommand": "pnpm run hook:docs"
              },
              "configurations": {},
              "parallelism": true
            },
            "hook:format-watch": {
              "executor": "nx:run-script",
              "options": {
                "script": "hook:format-watch"
              },
              "metadata": {
                "scriptContent": "node hooks/format-on-save.js",
                "runCommand": "pnpm run hook:format-watch"
              },
              "configurations": {},
              "parallelism": true
            },
            "hook:memory": {
              "executor": "nx:run-script",
              "options": {
                "script": "hook:memory"
              },
              "metadata": {
                "scriptContent": "node hooks/memory-monitor.js",
                "runCommand": "pnpm run hook:memory"
              },
              "configurations": {},
              "parallelism": true
            },
            "hook:memory-watch": {
              "executor": "nx:run-script",
              "options": {
                "script": "hook:memory-watch"
              },
              "metadata": {
                "scriptContent": "node hooks/memory-watch.js",
                "runCommand": "pnpm run hook:memory-watch"
              },
              "configurations": {},
              "parallelism": true
            },
            "hook:performance": {
              "executor": "nx:run-script",
              "options": {
                "script": "hook:performance"
              },
              "metadata": {
                "scriptContent": "node hooks/performance-monitor.js",
                "runCommand": "pnpm run hook:performance"
              },
              "configurations": {},
              "parallelism": true
            },
            "hook:pre-commit": {
              "executor": "nx:run-script",
              "options": {
                "script": "hook:pre-commit"
              },
              "metadata": {
                "scriptContent": "node hooks/pre-commit.js",
                "runCommand": "pnpm run hook:pre-commit"
              },
              "configurations": {},
              "parallelism": true
            },
            "hook:screenshot": {
              "executor": "nx:run-script",
              "options": {
                "script": "hook:screenshot"
              },
              "metadata": {
                "scriptContent": "node hooks/ui-screenshot.js",
                "runCommand": "pnpm run hook:screenshot"
              },
              "configurations": {},
              "parallelism": true
            },
            "hook:test-watch": {
              "executor": "nx:run-script",
              "options": {
                "script": "hook:test-watch"
              },
              "metadata": {
                "scriptContent": "node hooks/test-watch.js",
                "runCommand": "pnpm run hook:test-watch"
              },
              "configurations": {},
              "parallelism": true
            },
            "hook:validate-patterns": {
              "executor": "nx:run-script",
              "options": {
                "script": "hook:validate-patterns"
              },
              "metadata": {
                "scriptContent": "node hooks/web-search-validation.js",
                "runCommand": "pnpm run hook:validate-patterns"
              },
              "configurations": {},
              "parallelism": true
            },
            "hook:validate-tech": {
              "executor": "nx:run-script",
              "options": {
                "script": "hook:validate-tech"
              },
              "metadata": {
                "scriptContent": "node hooks/tech-stack-validator.js",
                "runCommand": "pnpm run hook:validate-tech"
              },
              "configurations": {},
              "parallelism": true
            },
            "system:init": {
              "executor": "nx:run-script",
              "options": {
                "script": "system:init"
              },
              "metadata": {
                "scriptContent": "node .claude/unified-development-system.js",
                "runCommand": "pnpm run system:init"
              },
              "configurations": {},
              "parallelism": true
            },
            "system:status": {
              "executor": "nx:run-script",
              "options": {
                "script": "system:status"
              },
              "metadata": {
                "scriptContent": "node .claude/unified-development-system.js status",
                "runCommand": "pnpm run system:status"
              },
              "configurations": {},
              "parallelism": true
            },
            "system:workflow": {
              "executor": "nx:run-script",
              "options": {
                "script": "system:workflow"
              },
              "metadata": {
                "scriptContent": "node .claude/unified-development-system.js workflow",
                "runCommand": "pnpm run system:workflow"
              },
              "configurations": {},
              "parallelism": true
            },
            "system:optimize": {
              "executor": "nx:run-script",
              "options": {
                "script": "system:optimize"
              },
              "metadata": {
                "scriptContent": "node .claude/unified-development-system.js optimize",
                "runCommand": "pnpm run system:optimize"
              },
              "configurations": {},
              "parallelism": true
            },
            "system:dashboard": {
              "executor": "nx:run-script",
              "options": {
                "script": "system:dashboard"
              },
              "metadata": {
                "scriptContent": "node .claude/unified-development-system.js dashboard",
                "runCommand": "pnpm run system:dashboard"
              },
              "configurations": {},
              "parallelism": true
            },
            "system:report": {
              "executor": "nx:run-script",
              "options": {
                "script": "system:report"
              },
              "metadata": {
                "scriptContent": "node .claude/unified-development-system.js report",
                "runCommand": "pnpm run system:report"
              },
              "configurations": {},
              "parallelism": true
            },
            "agent:feature": {
              "executor": "nx:run-script",
              "options": {
                "script": "agent:feature"
              },
              "metadata": {
                "scriptContent": "node .claude/unified-development-system.js workflow feature-development",
                "runCommand": "pnpm run agent:feature"
              },
              "configurations": {},
              "parallelism": true
            },
            "agent:bug": {
              "executor": "nx:run-script",
              "options": {
                "script": "agent:bug"
              },
              "metadata": {
                "scriptContent": "node .claude/unified-development-system.js workflow bug-resolution",
                "runCommand": "pnpm run agent:bug"
              },
              "configurations": {},
              "parallelism": true
            },
            "agent:security": {
              "executor": "nx:run-script",
              "options": {
                "script": "agent:security"
              },
              "metadata": {
                "scriptContent": "node .claude/unified-development-system.js workflow security-audit",
                "runCommand": "pnpm run agent:security"
              },
              "configurations": {},
              "parallelism": true
            },
            "mcp:status": {
              "executor": "nx:run-script",
              "options": {
                "script": "mcp:status"
              },
              "metadata": {
                "scriptContent": "node .claude/mcp-development-orchestrator.js status",
                "runCommand": "pnpm run mcp:status"
              },
              "configurations": {},
              "parallelism": true
            },
            "mcp:workflow": {
              "executor": "nx:run-script",
              "options": {
                "script": "mcp:workflow"
              },
              "metadata": {
                "scriptContent": "node .claude/mcp-development-orchestrator.js workflow",
                "runCommand": "pnpm run mcp:workflow"
              },
              "configurations": {},
              "parallelism": true
            },
            "multiagent:status": {
              "executor": "nx:run-script",
              "options": {
                "script": "multiagent:status"
              },
              "metadata": {
                "scriptContent": "node .claude/multi-agent-workflow.js status",
                "runCommand": "pnpm run multiagent:status"
              },
              "configurations": {},
              "parallelism": true
            },
            "multiagent:workflow": {
              "executor": "nx:run-script",
              "options": {
                "script": "multiagent:workflow"
              },
              "metadata": {
                "scriptContent": "node .claude/multi-agent-workflow.js workflow",
                "runCommand": "pnpm run multiagent:workflow"
              },
              "configurations": {},
              "parallelism": true
            },
            "dev:advanced": {
              "executor": "nx:run-script",
              "options": {
                "script": "dev:advanced"
              },
              "metadata": {
                "scriptContent": "npm run system:init && npm run dev",
                "runCommand": "pnpm run dev:advanced"
              },
              "configurations": {},
              "parallelism": true
            },
            "lint": {
              "executor": "nx:run-script",
              "options": {
                "script": "lint"
              },
              "metadata": {
                "scriptContent": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
                "runCommand": "pnpm run lint"
              },
              "configurations": {},
              "parallelism": true,
              "inputs": [
                "default",
                "{workspaceRoot}/eslint.config.js",
                "{workspaceRoot}/.eslintrc.*"
              ],
              "outputs": [],
              "cache": true
            },
            "lint:fix": {
              "executor": "nx:run-script",
              "options": {
                "script": "lint:fix"
              },
              "metadata": {
                "scriptContent": "eslint . --ext ts,tsx --fix",
                "runCommand": "pnpm run lint:fix"
              },
              "configurations": {},
              "parallelism": true,
              "inputs": [
                "default",
                "{workspaceRoot}/eslint.config.js"
              ],
              "outputs": [],
              "cache": false
            },
            "package": {
              "executor": "nx:run-script",
              "options": {
                "script": "package"
              },
              "metadata": {
                "scriptContent": "npm run build && electron-builder --dir",
                "runCommand": "pnpm run package"
              },
              "configurations": {},
              "parallelism": true
            },
            "prepare": {
              "executor": "nx:run-script",
              "options": {
                "script": "prepare"
              },
              "metadata": {
                "scriptContent": "husky install",
                "runCommand": "pnpm run prepare"
              },
              "configurations": {},
              "parallelism": true
            },
            "preview": {
              "executor": "nx:run-script",
              "options": {
                "script": "preview"
              },
              "metadata": {
                "scriptContent": "vite preview",
                "runCommand": "pnpm run preview"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": false
            },
            "puppeteer:demo": {
              "executor": "nx:run-script",
              "options": {
                "script": "puppeteer:demo"
              },
              "metadata": {
                "scriptContent": "node scripts/web-automation-demo.js",
                "runCommand": "pnpm run puppeteer:demo"
              },
              "configurations": {},
              "parallelism": true
            },
            "puppeteer:design": {
              "executor": "nx:run-script",
              "options": {
                "script": "puppeteer:design"
              },
              "metadata": {
                "scriptContent": "bash ~/.claude/hooks/puppeteer-automation.sh UserPromptSubmit design",
                "runCommand": "pnpm run puppeteer:design"
              },
              "configurations": {},
              "parallelism": true
            },
            "puppeteer:performance": {
              "executor": "nx:run-script",
              "options": {
                "script": "puppeteer:performance"
              },
              "metadata": {
                "scriptContent": "bash ~/.claude/hooks/puppeteer-automation.sh UserPromptSubmit performance",
                "runCommand": "pnpm run puppeteer:performance"
              },
              "configurations": {},
              "parallelism": true
            },
            "puppeteer:screenshot": {
              "executor": "nx:run-script",
              "options": {
                "script": "puppeteer:screenshot"
              },
              "metadata": {
                "scriptContent": "bash ~/.claude/hooks/puppeteer-automation.sh UserPromptSubmit screenshot",
                "runCommand": "pnpm run puppeteer:screenshot"
              },
              "configurations": {},
              "parallelism": true
            },
            "puppeteer:test": {
              "executor": "nx:run-script",
              "options": {
                "script": "puppeteer:test"
              },
              "metadata": {
                "scriptContent": "bash ~/.claude/hooks/puppeteer-automation.sh UserPromptSubmit test",
                "runCommand": "pnpm run puppeteer:test"
              },
              "configurations": {},
              "parallelism": true
            },
            "setup:hooks": {
              "executor": "nx:run-script",
              "options": {
                "script": "setup:hooks"
              },
              "metadata": {
                "scriptContent": "node scripts/setup-hooks.js",
                "runCommand": "pnpm run setup:hooks"
              },
              "configurations": {},
              "parallelism": true
            },
            "start": {
              "executor": "nx:run-script",
              "options": {
                "script": "start"
              },
              "metadata": {
                "scriptContent": "electron electron/main.js",
                "runCommand": "pnpm run start"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "test": {
              "executor": "nx:run-script",
              "options": {
                "script": "test"
              },
              "metadata": {
                "scriptContent": "vitest",
                "runCommand": "pnpm run test"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "default",
                "^production"
              ],
              "outputs": [
                "{projectRoot}/playwright-report/**",
                "{projectRoot}/test-results/**",
                "{projectRoot}/coverage/**"
              ],
              "cache": true
            },
            "typecheck": {
              "executor": "nx:run-script",
              "options": {
                "script": "typecheck"
              },
              "metadata": {
                "scriptContent": "tsc --noEmit",
                "runCommand": "pnpm run typecheck"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [],
              "inputs": [
                "default",
                "^default",
                "{projectRoot}/tsconfig.json"
              ],
              "outputs": [],
              "cache": true
            },
            "typecheck:all": {
              "executor": "nx:run-script",
              "options": {
                "script": "typecheck:all"
              },
              "metadata": {
                "scriptContent": "npm run typecheck && npm run typecheck:build && npm run typecheck:test",
                "runCommand": "pnpm run typecheck:all"
              },
              "configurations": {},
              "parallelism": true
            },
            "typecheck:build": {
              "executor": "nx:run-script",
              "options": {
                "script": "typecheck:build"
              },
              "metadata": {
                "scriptContent": "tsc --noEmit -p tsconfig.build.json",
                "runCommand": "pnpm run typecheck:build"
              },
              "configurations": {},
              "parallelism": true
            },
            "typecheck:test": {
              "executor": "nx:run-script",
              "options": {
                "script": "typecheck:test"
              },
              "metadata": {
                "scriptContent": "tsc --noEmit -p tsconfig.test.json",
                "runCommand": "pnpm run typecheck:test"
              },
              "configurations": {},
              "parallelism": true
            },
            "typecheck:watch": {
              "executor": "nx:run-script",
              "options": {
                "script": "typecheck:watch"
              },
              "metadata": {
                "scriptContent": "tsc --noEmit --watch",
                "runCommand": "pnpm run typecheck:watch"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            }
          },
          "implicitDependencies": []
        }
      },
      "vibe-tech-lovable": {
        "name": "vibe-tech-lovable",
        "type": "app",
        "data": {
          "root": "projects/active/web-apps/vibe-tech-lovable",
          "name": "vibe-tech-lovable",
          "projectType": "application",
          "tags": [
            "npm:private",
            "scope:web",
            "product:vibe-tech-lovable",
            "type:application"
          ],
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "build:production",
                "build:dev",
                "test:ui",
                "test:report",
                "test:debug"
              ]
            },
            "js": {
              "packageName": "vibe-tech-lovable",
              "packageVersion": "0.0.0",
              "isInPackageManagerWorkspaces": true
            }
          },
          "targets": {
            "build:production": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:production"
              },
              "metadata": {
                "scriptContent": "vite build --config vite.config.production.ts",
                "runCommand": "pnpm run build:production"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production"
              ],
              "outputs": [
                "{projectRoot}/dist/**",
                "{projectRoot}/build/**"
              ],
              "cache": true
            },
            "build:dev": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:dev"
              },
              "metadata": {
                "scriptContent": "vite build --mode development",
                "runCommand": "pnpm run build:dev"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "default",
                "^default"
              ],
              "outputs": [
                "{projectRoot}/dist/**",
                "{projectRoot}/build/**"
              ],
              "cache": true
            },
            "test:ui": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:ui"
              },
              "metadata": {
                "scriptContent": "playwright test --ui",
                "runCommand": "pnpm run test:ui"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": false
            },
            "test:report": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:report"
              },
              "metadata": {
                "scriptContent": "playwright show-report",
                "runCommand": "pnpm run test:report"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:debug": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:debug"
              },
              "metadata": {
                "scriptContent": "playwright test --debug",
                "runCommand": "pnpm run test:debug"
              },
              "configurations": {},
              "parallelism": true
            },
            "dev": {
              "executor": "nx:run-commands",
              "options": {
                "command": "pnpm run dev",
                "cwd": "projects/active/web-apps/vibe-tech-lovable"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{projectRoot}/dist"
              ],
              "options": {
                "command": "pnpm run build",
                "cwd": "projects/active/web-apps/vibe-tech-lovable"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production",
                "{projectRoot}/src/**",
                "{projectRoot}/index.html",
                "{projectRoot}/vite.config.ts",
                "{projectRoot}/public/**"
              ],
              "cache": true
            },
            "build-production": {
              "executor": "nx:run-commands",
              "outputs": [
                "{projectRoot}/dist"
              ],
              "options": {
                "command": "pnpm run build:production",
                "cwd": "projects/active/web-apps/vibe-tech-lovable"
              },
              "configurations": {},
              "parallelism": true
            },
            "build-dev": {
              "executor": "nx:run-commands",
              "outputs": [
                "{projectRoot}/dist"
              ],
              "options": {
                "command": "pnpm run build:dev",
                "cwd": "projects/active/web-apps/vibe-tech-lovable"
              },
              "configurations": {},
              "parallelism": true
            },
            "lint": {
              "executor": "nx:run-commands",
              "options": {
                "command": "pnpm run lint",
                "cwd": "projects/active/web-apps/vibe-tech-lovable"
              },
              "configurations": {},
              "parallelism": true,
              "inputs": [
                "default",
                "{workspaceRoot}/eslint.config.js",
                "{workspaceRoot}/.eslintrc.*"
              ],
              "outputs": [],
              "cache": true
            },
            "preview": {
              "executor": "nx:run-commands",
              "options": {
                "command": "pnpm run preview",
                "cwd": "projects/active/web-apps/vibe-tech-lovable"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": false
            },
            "analyze": {
              "executor": "nx:run-commands",
              "options": {
                "command": "pnpm run analyze",
                "cwd": "projects/active/web-apps/vibe-tech-lovable"
              },
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "executor": "nx:run-commands",
              "outputs": [
                "{projectRoot}/playwright-report"
              ],
              "options": {
                "command": "pnpm run test",
                "cwd": "projects/active/web-apps/vibe-tech-lovable"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "default",
                "^production"
              ],
              "cache": true
            },
            "test-ui": {
              "executor": "nx:run-commands",
              "options": {
                "command": "pnpm run test:ui",
                "cwd": "projects/active/web-apps/vibe-tech-lovable"
              },
              "configurations": {},
              "parallelism": true
            },
            "test-report": {
              "executor": "nx:run-commands",
              "options": {
                "command": "pnpm run test:report",
                "cwd": "projects/active/web-apps/vibe-tech-lovable"
              },
              "configurations": {},
              "parallelism": true
            },
            "test-debug": {
              "executor": "nx:run-commands",
              "options": {
                "command": "pnpm run test:debug",
                "cwd": "projects/active/web-apps/vibe-tech-lovable"
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "$schema": "../../../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "projects/active/web-apps/vibe-tech-lovable/src",
          "implicitDependencies": []
        }
      },
      "vibepilot": {
        "name": "vibepilot",
        "type": "app",
        "data": {
          "root": "projects/active/desktop-apps/taskmaster",
          "name": "vibepilot",
          "projectType": "application",
          "tags": [
            "npm:private"
          ],
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "dev",
                "build",
                "lint",
                "lint:fix",
                "typecheck",
                "test",
                "test:run",
                "test:ui",
                "test:coverage",
                "quality",
                "quality:fix",
                "preview",
                "tauri",
                "tauri:dev",
                "tauri:build"
              ]
            },
            "js": {
              "packageName": "vibepilot",
              "packageVersion": "0.0.0",
              "isInPackageManagerWorkspaces": true
            }
          },
          "targets": {
            "dev": {
              "executor": "nx:run-script",
              "options": {
                "script": "dev"
              },
              "metadata": {
                "scriptContent": "vite",
                "runCommand": "pnpm run dev"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "build": {
              "executor": "nx:run-script",
              "options": {
                "script": "build"
              },
              "metadata": {
                "scriptContent": "tsc -b && vite build",
                "runCommand": "pnpm run build"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production",
                "{projectRoot}/src/**",
                "{projectRoot}/index.html",
                "{projectRoot}/vite.config.ts",
                "{projectRoot}/public/**"
              ],
              "outputs": [
                "{projectRoot}/dist/**",
                "{projectRoot}/build/**",
                "{projectRoot}/.next/**"
              ],
              "cache": true
            },
            "lint": {
              "executor": "nx:run-script",
              "options": {
                "script": "lint"
              },
              "metadata": {
                "scriptContent": "eslint .",
                "runCommand": "pnpm run lint"
              },
              "configurations": {},
              "parallelism": true,
              "inputs": [
                "default",
                "{workspaceRoot}/eslint.config.js",
                "{workspaceRoot}/.eslintrc.*"
              ],
              "outputs": [],
              "cache": true
            },
            "lint:fix": {
              "executor": "nx:run-script",
              "options": {
                "script": "lint:fix"
              },
              "metadata": {
                "scriptContent": "eslint . --fix",
                "runCommand": "pnpm run lint:fix"
              },
              "configurations": {},
              "parallelism": true,
              "inputs": [
                "default",
                "{workspaceRoot}/eslint.config.js"
              ],
              "outputs": [],
              "cache": false
            },
            "typecheck": {
              "executor": "nx:run-script",
              "options": {
                "script": "typecheck"
              },
              "metadata": {
                "scriptContent": "tsc --noEmit",
                "runCommand": "pnpm run typecheck"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [],
              "inputs": [
                "default",
                "^default",
                "{projectRoot}/tsconfig.json"
              ],
              "outputs": [],
              "cache": true
            },
            "test": {
              "executor": "nx:run-script",
              "options": {
                "script": "test"
              },
              "metadata": {
                "scriptContent": "vitest",
                "runCommand": "pnpm run test"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "default",
                "^production"
              ],
              "outputs": [
                "{projectRoot}/playwright-report/**",
                "{projectRoot}/test-results/**",
                "{projectRoot}/coverage/**"
              ],
              "cache": true
            },
            "test:run": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:run"
              },
              "metadata": {
                "scriptContent": "vitest run",
                "runCommand": "pnpm run test:run"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:ui": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:ui"
              },
              "metadata": {
                "scriptContent": "vitest --ui",
                "runCommand": "pnpm run test:ui"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": false
            },
            "test:coverage": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:coverage"
              },
              "metadata": {
                "scriptContent": "vitest run --coverage",
                "runCommand": "pnpm run test:coverage"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "default",
                "^production"
              ],
              "outputs": [
                "{projectRoot}/coverage/**",
                "{projectRoot}/coverage_html/**",
                "{projectRoot}/coverage.json",
                "{projectRoot}/coverage.xml"
              ],
              "cache": true
            },
            "quality": {
              "executor": "nx:run-script",
              "options": {
                "script": "quality"
              },
              "metadata": {
                "scriptContent": "npm run lint && npm run typecheck && npm run test:run && npm run build",
                "runCommand": "pnpm run quality"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "lint",
                "typecheck",
                "build"
              ],
              "cache": true
            },
            "quality:fix": {
              "executor": "nx:run-script",
              "options": {
                "script": "quality:fix"
              },
              "metadata": {
                "scriptContent": "npm run lint:fix && npm run typecheck && npm run test:run",
                "runCommand": "pnpm run quality:fix"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "lint:fix",
                "typecheck"
              ],
              "cache": false
            },
            "preview": {
              "executor": "nx:run-script",
              "options": {
                "script": "preview"
              },
              "metadata": {
                "scriptContent": "vite preview",
                "runCommand": "pnpm run preview"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": false
            },
            "tauri": {
              "executor": "nx:run-script",
              "options": {
                "script": "tauri"
              },
              "metadata": {
                "scriptContent": "tauri",
                "runCommand": "pnpm run tauri"
              },
              "configurations": {},
              "parallelism": true
            },
            "tauri:dev": {
              "executor": "nx:run-script",
              "options": {
                "script": "tauri:dev"
              },
              "metadata": {
                "scriptContent": "tauri dev",
                "runCommand": "pnpm run tauri:dev"
              },
              "configurations": {},
              "parallelism": true
            },
            "tauri:build": {
              "executor": "nx:run-script",
              "options": {
                "script": "tauri:build"
              },
              "metadata": {
                "scriptContent": "tauri build",
                "runCommand": "pnpm run tauri:build"
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "implicitDependencies": []
        }
      },
      "shipping-pwa": {
        "name": "shipping-pwa",
        "type": "app",
        "data": {
          "root": "projects/active/web-apps/shipping-pwa",
          "name": "shipping-pwa",
          "projectType": "application",
          "tags": [
            "npm:private",
            "scope:web",
            "product:shipping-pwa",
            "type:application"
          ],
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "build:mobile",
                "build:worker",
                "build:pwa",
                "build:analyze",
                "preview",
                "test:run",
                "test:coverage",
                "test:e2e",
                "test:ui",
                "server:dev",
                "lighthouse",
                "pwa:audit",
                "pwa:optimize",
                "prepare",
                "cap:sync",
                "cap:open:android",
                "cap:open:ios",
                "cap:run:android",
                "cap:run:ios",
                "android:build",
                "android:bundle",
                "android:upload",
                "ios:build",
                "ios:archive",
                "deploy:android",
                "deploy:ios",
                "worker:dev",
                "worker:deploy",
                "worker:deploy:staging",
                "worker:deploy:production",
                "db:create",
                "db:migrate",
                "db:migrate:local",
                "pages:deploy"
              ]
            },
            "js": {
              "packageName": "shipping-pwa",
              "packageVersion": "1.0.0",
              "isInPackageManagerWorkspaces": true
            }
          },
          "targets": {
            "build:mobile": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:mobile"
              },
              "metadata": {
                "scriptContent": "vite build && node scripts/pwa-build-optimizer.js && npx cap sync",
                "runCommand": "pnpm run build:mobile"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:worker": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:worker"
              },
              "metadata": {
                "scriptContent": "wrangler deploy --dry-run --outdir dist-worker",
                "runCommand": "pnpm run build:worker"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:pwa": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:pwa"
              },
              "metadata": {
                "scriptContent": "vite build && node scripts/pwa-build-optimizer.js --optimizeImages true --generateWebP true --generateAVIF true",
                "runCommand": "pnpm run build:pwa"
              },
              "configurations": {},
              "parallelism": true
            },
            "build:analyze": {
              "executor": "nx:run-script",
              "options": {
                "script": "build:analyze"
              },
              "metadata": {
                "scriptContent": "vite build --mode analyze && node scripts/pwa-build-optimizer.js",
                "runCommand": "pnpm run build:analyze"
              },
              "configurations": {},
              "parallelism": true
            },
            "preview": {
              "executor": "nx:run-script",
              "options": {
                "script": "preview"
              },
              "metadata": {
                "scriptContent": "vite preview",
                "runCommand": "pnpm run preview"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": false
            },
            "test:run": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:run"
              },
              "metadata": {
                "scriptContent": "jest --passWithNoTests",
                "runCommand": "pnpm run test:run"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:coverage": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:coverage"
              },
              "metadata": {
                "scriptContent": "jest --coverage",
                "runCommand": "pnpm run test:coverage"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "default",
                "^production"
              ],
              "outputs": [
                "{projectRoot}/coverage/**",
                "{projectRoot}/coverage_html/**",
                "{projectRoot}/coverage.json",
                "{projectRoot}/coverage.xml"
              ],
              "cache": true
            },
            "test:e2e": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:e2e"
              },
              "metadata": {
                "scriptContent": "playwright test",
                "runCommand": "pnpm run test:e2e"
              },
              "configurations": {},
              "parallelism": true
            },
            "test:ui": {
              "executor": "nx:run-script",
              "options": {
                "script": "test:ui"
              },
              "metadata": {
                "scriptContent": "playwright test --ui",
                "runCommand": "pnpm run test:ui"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": false
            },
            "server:dev": {
              "executor": "nx:run-script",
              "options": {
                "script": "server:dev"
              },
              "metadata": {
                "scriptContent": "tsx watch server.ts",
                "runCommand": "pnpm run server:dev"
              },
              "configurations": {},
              "parallelism": true
            },
            "lighthouse": {
              "executor": "nx:run-script",
              "options": {
                "script": "lighthouse"
              },
              "metadata": {
                "scriptContent": "node lighthouse.js",
                "runCommand": "pnpm run lighthouse"
              },
              "configurations": {},
              "parallelism": true
            },
            "pwa:audit": {
              "executor": "nx:run-script",
              "options": {
                "script": "pwa:audit"
              },
              "metadata": {
                "scriptContent": "node scripts/pwa-audit.js",
                "runCommand": "pnpm run pwa:audit"
              },
              "configurations": {},
              "parallelism": true
            },
            "pwa:optimize": {
              "executor": "nx:run-script",
              "options": {
                "script": "pwa:optimize"
              },
              "metadata": {
                "scriptContent": "node scripts/pwa-build-optimizer.js",
                "runCommand": "pnpm run pwa:optimize"
              },
              "configurations": {},
              "parallelism": true
            },
            "prepare": {
              "executor": "nx:run-script",
              "options": {
                "script": "prepare"
              },
              "metadata": {
                "scriptContent": "husky",
                "runCommand": "pnpm run prepare"
              },
              "configurations": {},
              "parallelism": true
            },
            "cap:sync": {
              "executor": "nx:run-script",
              "options": {
                "script": "cap:sync"
              },
              "metadata": {
                "scriptContent": "npx cap sync",
                "runCommand": "pnpm run cap:sync"
              },
              "configurations": {},
              "parallelism": true
            },
            "cap:open:android": {
              "executor": "nx:run-script",
              "options": {
                "script": "cap:open:android"
              },
              "metadata": {
                "scriptContent": "npx cap open android",
                "runCommand": "pnpm run cap:open:android"
              },
              "configurations": {},
              "parallelism": true
            },
            "cap:open:ios": {
              "executor": "nx:run-script",
              "options": {
                "script": "cap:open:ios"
              },
              "metadata": {
                "scriptContent": "npx cap open ios",
                "runCommand": "pnpm run cap:open:ios"
              },
              "configurations": {},
              "parallelism": true
            },
            "cap:run:android": {
              "executor": "nx:run-script",
              "options": {
                "script": "cap:run:android"
              },
              "metadata": {
                "scriptContent": "npx cap run android",
                "runCommand": "pnpm run cap:run:android"
              },
              "configurations": {},
              "parallelism": true
            },
            "cap:run:ios": {
              "executor": "nx:run-script",
              "options": {
                "script": "cap:run:ios"
              },
              "metadata": {
                "scriptContent": "npx cap run ios",
                "runCommand": "pnpm run cap:run:ios"
              },
              "configurations": {},
              "parallelism": true
            },
            "android:build": {
              "executor": "nx:run-script",
              "options": {
                "script": "android:build"
              },
              "metadata": {
                "scriptContent": "npm run build:mobile && cd android && ./gradlew assembleRelease",
                "runCommand": "pnpm run android:build"
              },
              "configurations": {},
              "parallelism": true
            },
            "android:bundle": {
              "executor": "nx:run-script",
              "options": {
                "script": "android:bundle"
              },
              "metadata": {
                "scriptContent": "npm run build:mobile && cd android && ./gradlew bundleRelease",
                "runCommand": "pnpm run android:bundle"
              },
              "configurations": {},
              "parallelism": true
            },
            "android:upload": {
              "executor": "nx:run-script",
              "options": {
                "script": "android:upload"
              },
              "metadata": {
                "scriptContent": "npm run android:bundle && npx @capacitor/cli deploy android --upload-keystore",
                "runCommand": "pnpm run android:upload"
              },
              "configurations": {},
              "parallelism": true
            },
            "ios:build": {
              "executor": "nx:run-script",
              "options": {
                "script": "ios:build"
              },
              "metadata": {
                "scriptContent": "npm run build:mobile && npx cap open ios",
                "runCommand": "pnpm run ios:build"
              },
              "configurations": {},
              "parallelism": true
            },
            "ios:archive": {
              "executor": "nx:run-script",
              "options": {
                "script": "ios:archive"
              },
              "metadata": {
                "scriptContent": "npm run build:mobile && xcodebuild -workspace ios/App/App.xcworkspace -scheme App -archivePath ios/App/build/App.xcarchive archive",
                "runCommand": "pnpm run ios:archive"
              },
              "configurations": {},
              "parallelism": true
            },
            "deploy:android": {
              "executor": "nx:run-script",
              "options": {
                "script": "deploy:android"
              },
              "metadata": {
                "scriptContent": "npm run quality && npm run android:bundle",
                "runCommand": "pnpm run deploy:android"
              },
              "configurations": {},
              "parallelism": true
            },
            "deploy:ios": {
              "executor": "nx:run-script",
              "options": {
                "script": "deploy:ios"
              },
              "metadata": {
                "scriptContent": "npm run quality && npm run ios:build",
                "runCommand": "pnpm run deploy:ios"
              },
              "configurations": {},
              "parallelism": true
            },
            "worker:dev": {
              "executor": "nx:run-script",
              "options": {
                "script": "worker:dev"
              },
              "metadata": {
                "scriptContent": "wrangler dev",
                "runCommand": "pnpm run worker:dev"
              },
              "configurations": {},
              "parallelism": true
            },
            "worker:deploy": {
              "executor": "nx:run-script",
              "options": {
                "script": "worker:deploy"
              },
              "metadata": {
                "scriptContent": "wrangler deploy",
                "runCommand": "pnpm run worker:deploy"
              },
              "configurations": {},
              "parallelism": true
            },
            "worker:deploy:staging": {
              "executor": "nx:run-script",
              "options": {
                "script": "worker:deploy:staging"
              },
              "metadata": {
                "scriptContent": "wrangler deploy --env staging",
                "runCommand": "pnpm run worker:deploy:staging"
              },
              "configurations": {},
              "parallelism": true
            },
            "worker:deploy:production": {
              "executor": "nx:run-script",
              "options": {
                "script": "worker:deploy:production"
              },
              "metadata": {
                "scriptContent": "wrangler deploy --env production",
                "runCommand": "pnpm run worker:deploy:production"
              },
              "configurations": {},
              "parallelism": true
            },
            "db:create": {
              "executor": "nx:run-script",
              "options": {
                "script": "db:create"
              },
              "metadata": {
                "scriptContent": "wrangler d1 create dc8980-shipping-db",
                "runCommand": "pnpm run db:create"
              },
              "configurations": {},
              "parallelism": true
            },
            "db:migrate": {
              "executor": "nx:run-script",
              "options": {
                "script": "db:migrate"
              },
              "metadata": {
                "scriptContent": "wrangler d1 migrations apply dc8980-shipping-db",
                "runCommand": "pnpm run db:migrate"
              },
              "configurations": {},
              "parallelism": true
            },
            "db:migrate:local": {
              "executor": "nx:run-script",
              "options": {
                "script": "db:migrate:local"
              },
              "metadata": {
                "scriptContent": "wrangler d1 migrations apply dc8980-shipping-db --local",
                "runCommand": "pnpm run db:migrate:local"
              },
              "configurations": {},
              "parallelism": true
            },
            "pages:deploy": {
              "executor": "nx:run-script",
              "options": {
                "script": "pages:deploy"
              },
              "metadata": {
                "scriptContent": "npm run build && wrangler pages deploy dist",
                "runCommand": "pnpm run pages:deploy"
              },
              "configurations": {},
              "parallelism": true
            },
            "dev": {
              "executor": "nx:run-commands",
              "options": {
                "command": "pnpm run dev",
                "cwd": "projects/active/web-apps/shipping-pwa"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{projectRoot}/dist"
              ],
              "options": {
                "command": "pnpm run build",
                "cwd": "projects/active/web-apps/shipping-pwa"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production",
                "{projectRoot}/src/**",
                "{projectRoot}/index.html",
                "{projectRoot}/vite.config.ts",
                "{projectRoot}/public/**"
              ],
              "cache": true
            },
            "build-mobile": {
              "executor": "nx:run-commands",
              "outputs": [
                "{projectRoot}/dist",
                "{projectRoot}/android/app/build"
              ],
              "options": {
                "command": "pnpm run build:mobile",
                "cwd": "projects/active/web-apps/shipping-pwa"
              },
              "configurations": {},
              "parallelism": true
            },
            "lint": {
              "executor": "nx:run-commands",
              "options": {
                "command": "pnpm run lint",
                "cwd": "projects/active/web-apps/shipping-pwa"
              },
              "configurations": {},
              "parallelism": true,
              "inputs": [
                "default",
                "{workspaceRoot}/eslint.config.js",
                "{workspaceRoot}/.eslintrc.*"
              ],
              "outputs": [],
              "cache": true
            },
            "typecheck": {
              "executor": "nx:run-commands",
              "options": {
                "command": "echo 'Skipping typecheck for shipping-pwa (has TS errors in service worker)'",
                "cwd": "projects/active/web-apps/shipping-pwa"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [],
              "inputs": [
                "default",
                "^default",
                "{projectRoot}/tsconfig.json"
              ],
              "outputs": [],
              "cache": true
            },
            "test": {
              "executor": "nx:run-commands",
              "outputs": [
                "{projectRoot}/coverage"
              ],
              "options": {
                "command": "pnpm run test",
                "cwd": "projects/active/web-apps/shipping-pwa"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "default",
                "^production"
              ],
              "cache": true
            },
            "test-e2e": {
              "executor": "nx:run-commands",
              "options": {
                "command": "pnpm run test:e2e",
                "cwd": "projects/active/web-apps/shipping-pwa"
              },
              "configurations": {},
              "parallelism": true
            },
            "test-ui": {
              "executor": "nx:run-commands",
              "options": {
                "command": "pnpm run test:ui",
                "cwd": "projects/active/web-apps/shipping-pwa"
              },
              "configurations": {},
              "parallelism": true
            },
            "quality": {
              "executor": "nx:run-commands",
              "options": {
                "command": "pnpm run quality",
                "cwd": "projects/active/web-apps/shipping-pwa"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "lint",
                "typecheck",
                "build"
              ],
              "cache": true
            },
            "server": {
              "executor": "nx:run-commands",
              "options": {
                "command": "pnpm run server",
                "cwd": "projects/active/web-apps/shipping-pwa"
              },
              "configurations": {},
              "parallelism": true
            },
            "server-dev": {
              "executor": "nx:run-commands",
              "options": {
                "command": "pnpm run server:dev",
                "cwd": "projects/active/web-apps/shipping-pwa"
              },
              "configurations": {},
              "parallelism": true
            },
            "worker-deploy": {
              "executor": "nx:run-commands",
              "options": {
                "command": "pnpm run worker:deploy",
                "cwd": "projects/active/web-apps/shipping-pwa"
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "$schema": "../../../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "projects/active/web-apps/shipping-pwa/src",
          "implicitDependencies": []
        }
      },
      "memory-bank": {
        "name": "memory-bank",
        "type": "app",
        "data": {
          "root": "projects/active/web-apps/memory-bank",
          "name": "memory-bank",
          "projectType": "application",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "test",
                "init",
                "stats",
                "health",
                "build",
                "dev",
                "start",
                "lint",
                "typecheck"
              ]
            },
            "description": "Memory management system for Claude Code",
            "js": {
              "packageName": "memory-bank",
              "packageVersion": "1.0.0",
              "packageMain": "memory_manager.js",
              "isInPackageManagerWorkspaces": true
            }
          },
          "targets": {
            "test": {
              "executor": "nx:run-script",
              "options": {
                "script": "test"
              },
              "metadata": {
                "scriptContent": "node test_vscode_memory_integration.js",
                "runCommand": "pnpm run test"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "default",
                "^production"
              ],
              "outputs": [
                "{projectRoot}/playwright-report/**",
                "{projectRoot}/test-results/**",
                "{projectRoot}/coverage/**"
              ],
              "cache": true
            },
            "init": {
              "executor": "nx:run-script",
              "options": {
                "script": "init"
              },
              "metadata": {
                "scriptContent": "node memory_cli.js init",
                "runCommand": "pnpm run init"
              },
              "configurations": {},
              "parallelism": true
            },
            "stats": {
              "executor": "nx:run-script",
              "options": {
                "script": "stats"
              },
              "metadata": {
                "scriptContent": "node memory_cli.js stats",
                "runCommand": "pnpm run stats"
              },
              "configurations": {},
              "parallelism": true
            },
            "health": {
              "executor": "nx:run-script",
              "options": {
                "script": "health"
              },
              "metadata": {
                "scriptContent": "node memory_cli.js health",
                "runCommand": "pnpm run health"
              },
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-script",
              "options": {
                "script": "build"
              },
              "metadata": {
                "scriptContent": "echo \"No build step required for Node.js project\"",
                "runCommand": "pnpm run build"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production",
                "{projectRoot}/src/**",
                "{projectRoot}/index.html",
                "{projectRoot}/vite.config.ts",
                "{projectRoot}/public/**"
              ],
              "outputs": [
                "{projectRoot}/dist/**",
                "{projectRoot}/build/**",
                "{projectRoot}/.next/**"
              ],
              "cache": true
            },
            "dev": {
              "executor": "nx:run-script",
              "options": {
                "script": "dev"
              },
              "metadata": {
                "scriptContent": "node memory_manager.js",
                "runCommand": "pnpm run dev"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "start": {
              "executor": "nx:run-script",
              "options": {
                "script": "start"
              },
              "metadata": {
                "scriptContent": "node memory_manager.js",
                "runCommand": "pnpm run start"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "lint": {
              "executor": "nx:run-script",
              "options": {
                "script": "lint"
              },
              "metadata": {
                "scriptContent": "echo \"No linting configured\"",
                "runCommand": "pnpm run lint"
              },
              "configurations": {},
              "parallelism": true,
              "inputs": [
                "default",
                "{workspaceRoot}/eslint.config.js",
                "{workspaceRoot}/.eslintrc.*"
              ],
              "outputs": [],
              "cache": true
            },
            "typecheck": {
              "executor": "nx:run-script",
              "options": {
                "script": "typecheck"
              },
              "metadata": {
                "scriptContent": "echo \"No TypeScript in project\"",
                "runCommand": "pnpm run typecheck"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [],
              "inputs": [
                "default",
                "^default",
                "{projectRoot}/tsconfig.json"
              ],
              "outputs": [],
              "cache": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            }
          },
          "implicitDependencies": []
        }
      },
      "expo-app": {
        "name": "expo-app",
        "type": "app",
        "data": {
          "root": "projects/Vibe-Subscription-Guard",
          "name": "expo-app",
          "projectType": "application",
          "tags": [
            "npm:private"
          ],
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "start",
                "start-web",
                "start-web-dev",
                "lint",
                "android",
                "ios",
                "db:generate",
                "db:migrate",
                "db:studio"
              ]
            },
            "js": {
              "packageName": "expo-app",
              "packageVersion": "1.0.0",
              "packageMain": "expo-router/entry",
              "isInPackageManagerWorkspaces": true
            }
          },
          "targets": {
            "start": {
              "executor": "nx:run-script",
              "options": {
                "script": "start"
              },
              "metadata": {
                "scriptContent": "bunx rork start -p bhbtwhepkxyrgjvson8zf --tunnel",
                "runCommand": "pnpm run start"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "start-web": {
              "executor": "nx:run-script",
              "options": {
                "script": "start-web"
              },
              "metadata": {
                "scriptContent": "bunx rork start -p bhbtwhepkxyrgjvson8zf --web --tunnel",
                "runCommand": "pnpm run start-web"
              },
              "configurations": {},
              "parallelism": true
            },
            "start-web-dev": {
              "executor": "nx:run-script",
              "options": {
                "script": "start-web-dev"
              },
              "metadata": {
                "scriptContent": "DEBUG=expo* bunx rork start -p bhbtwhepkxyrgjvson8zf --web --tunnel",
                "runCommand": "pnpm run start-web-dev"
              },
              "configurations": {},
              "parallelism": true
            },
            "lint": {
              "executor": "nx:run-script",
              "options": {
                "script": "lint"
              },
              "metadata": {
                "scriptContent": "expo lint",
                "runCommand": "pnpm run lint"
              },
              "configurations": {},
              "parallelism": true,
              "inputs": [
                "default",
                "{workspaceRoot}/eslint.config.js",
                "{workspaceRoot}/.eslintrc.*"
              ],
              "outputs": [],
              "cache": true
            },
            "android": {
              "executor": "nx:run-script",
              "options": {
                "script": "android"
              },
              "metadata": {
                "scriptContent": "expo run:android",
                "runCommand": "pnpm run android"
              },
              "configurations": {},
              "parallelism": true
            },
            "ios": {
              "executor": "nx:run-script",
              "options": {
                "script": "ios"
              },
              "metadata": {
                "scriptContent": "expo run:ios",
                "runCommand": "pnpm run ios"
              },
              "configurations": {},
              "parallelism": true
            },
            "db:generate": {
              "executor": "nx:run-script",
              "options": {
                "script": "db:generate"
              },
              "metadata": {
                "scriptContent": "bunx drizzle-kit generate",
                "runCommand": "pnpm run db:generate"
              },
              "configurations": {},
              "parallelism": true
            },
            "db:migrate": {
              "executor": "nx:run-script",
              "options": {
                "script": "db:migrate"
              },
              "metadata": {
                "scriptContent": "bunx drizzle-kit migrate",
                "runCommand": "pnpm run db:migrate"
              },
              "configurations": {},
              "parallelism": true
            },
            "db:studio": {
              "executor": "nx:run-script",
              "options": {
                "script": "db:studio"
              },
              "metadata": {
                "scriptContent": "bunx drizzle-kit studio",
                "runCommand": "pnpm run db:studio"
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "implicitDependencies": []
        }
      },
      "@vibetech/ui": {
        "name": "@vibetech/ui",
        "type": "lib",
        "data": {
          "root": "packages/ui",
          "name": "@vibetech/ui",
          "projectType": "library",
          "tags": [
            "npm:private"
          ],
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "lint",
                "typecheck"
              ]
            },
            "js": {
              "packageName": "@vibetech/ui",
              "packageVersion": "0.0.0",
              "packageExports": {
                ".": "./src/index.ts",
                "./components/*": "./src/components/*.tsx",
                "./lib/*": "./src/lib/*.ts"
              },
              "isInPackageManagerWorkspaces": true
            }
          },
          "targets": {
            "lint": {
              "executor": "nx:run-script",
              "options": {
                "script": "lint"
              },
              "metadata": {
                "scriptContent": "eslint src",
                "runCommand": "pnpm run lint"
              },
              "configurations": {},
              "parallelism": true,
              "inputs": [
                "default",
                "{workspaceRoot}/eslint.config.js",
                "{workspaceRoot}/.eslintrc.*"
              ],
              "outputs": [],
              "cache": true
            },
            "typecheck": {
              "executor": "nx:run-script",
              "options": {
                "script": "typecheck"
              },
              "metadata": {
                "scriptContent": "tsc --noEmit",
                "runCommand": "pnpm run typecheck"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [],
              "inputs": [
                "default",
                "^default",
                "{projectRoot}/tsconfig.json"
              ],
              "outputs": [],
              "cache": true
            }
          },
          "implicitDependencies": []
        }
      },
      "vibe-tech-backend": {
        "name": "vibe-tech-backend",
        "type": "lib",
        "data": {
          "root": "backend",
          "name": "vibe-tech-backend",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "start",
                "dev",
                "dev:prod",
                "dev:prod:unix",
                "build",
                "prod",
                "prod:unix",
                "test",
                "lint",
                "typecheck",
                "health"
              ]
            },
            "description": "Backend server for Vibe Tech with local SQLite database",
            "js": {
              "packageName": "vibe-tech-backend",
              "packageVersion": "1.0.0",
              "packageMain": "server.js",
              "isInPackageManagerWorkspaces": true
            }
          },
          "targets": {
            "start": {
              "executor": "nx:run-script",
              "options": {
                "script": "start"
              },
              "metadata": {
                "scriptContent": "node server-production.js",
                "runCommand": "pnpm run start"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "dev": {
              "executor": "nx:run-script",
              "options": {
                "script": "dev"
              },
              "metadata": {
                "scriptContent": "nodemon server.js",
                "runCommand": "pnpm run dev"
              },
              "configurations": {},
              "parallelism": true,
              "cache": false
            },
            "dev:prod": {
              "executor": "nx:run-script",
              "options": {
                "script": "dev:prod"
              },
              "metadata": {
                "scriptContent": "set NODE_ENV=production && nodemon server-production.js",
                "runCommand": "pnpm run dev:prod"
              },
              "configurations": {},
              "parallelism": true
            },
            "dev:prod:unix": {
              "executor": "nx:run-script",
              "options": {
                "script": "dev:prod:unix"
              },
              "metadata": {
                "scriptContent": "NODE_ENV=production nodemon server-production.js",
                "runCommand": "pnpm run dev:prod:unix"
              },
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-script",
              "options": {
                "script": "build"
              },
              "metadata": {
                "scriptContent": "echo \"No build step required for Node.js backend\"",
                "runCommand": "pnpm run build"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production",
                "{projectRoot}/src/**",
                "{projectRoot}/index.html",
                "{projectRoot}/vite.config.ts",
                "{projectRoot}/public/**"
              ],
              "outputs": [
                "{projectRoot}/dist/**",
                "{projectRoot}/build/**",
                "{projectRoot}/.next/**"
              ],
              "cache": true
            },
            "prod": {
              "executor": "nx:run-script",
              "options": {
                "script": "prod"
              },
              "metadata": {
                "scriptContent": "set NODE_ENV=production && node server-production.js",
                "runCommand": "pnpm run prod"
              },
              "configurations": {},
              "parallelism": true
            },
            "prod:unix": {
              "executor": "nx:run-script",
              "options": {
                "script": "prod:unix"
              },
              "metadata": {
                "scriptContent": "NODE_ENV=production node server-production.js",
                "runCommand": "pnpm run prod:unix"
              },
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "executor": "nx:run-script",
              "options": {
                "script": "test"
              },
              "metadata": {
                "scriptContent": "echo \"Error: no test specified\" && exit 1",
                "runCommand": "pnpm run test"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "default",
                "^production"
              ],
              "outputs": [
                "{projectRoot}/playwright-report/**",
                "{projectRoot}/test-results/**",
                "{projectRoot}/coverage/**"
              ],
              "cache": true
            },
            "lint": {
              "executor": "nx:run-script",
              "options": {
                "script": "lint"
              },
              "metadata": {
                "scriptContent": "echo \"No linting configured for backend\"",
                "runCommand": "pnpm run lint"
              },
              "configurations": {},
              "parallelism": true,
              "inputs": [
                "default",
                "{workspaceRoot}/eslint.config.js",
                "{workspaceRoot}/.eslintrc.*"
              ],
              "outputs": [],
              "cache": true
            },
            "typecheck": {
              "executor": "nx:run-script",
              "options": {
                "script": "typecheck"
              },
              "metadata": {
                "scriptContent": "echo \"No TypeScript in backend\"",
                "runCommand": "pnpm run typecheck"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [],
              "inputs": [
                "default",
                "^default",
                "{projectRoot}/tsconfig.json"
              ],
              "outputs": [],
              "cache": true
            },
            "health": {
              "executor": "nx:run-script",
              "options": {
                "script": "health"
              },
              "metadata": {
                "scriptContent": "curl -f http://localhost:3000/health || exit 1",
                "runCommand": "pnpm run health"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            }
          },
          "implicitDependencies": []
        }
      }
    },
    "dependencies": {
      "business-booking-platform": [
        {
          "source": "business-booking-platform",
          "target": "@vibetech/ui",
          "type": "static"
        }
      ],
      "digital-content-builder": [],
      "nova-agent": [],
      "deepcode-editor": [],
      "vibe-tech-lovable": [],
      "vibepilot": [],
      "shipping-pwa": [],
      "memory-bank": [],
      "expo-app": [],
      "@vibetech/ui": [],
      "vibe-tech-backend": []
    }
  }
}